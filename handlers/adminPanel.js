const userService = require('../services/userService');
const testResultService = require('../services/testResultService');
const {
  getAdminMainKeyboard,
  getAdminMainInlineKeyboard,
  getUsersListKeyboard,
  getStatsKeyboard,
  getSearchKeyboard,
  getMessageKeyboard,
  getSettingsKeyboard,
  getUserProfileKeyboard,
  getConfirmationKeyboard,
  getArchetypesKeyboard,
  getPeriodKeyboard,
  getPaginationInlineKeyboard,
  getUserActionsInlineKeyboard
} = require('../keyboards/adminKeyboards');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const adminStates = new Map();

class AdminPanelHandler {
  constructor(bot) {
    this.bot = bot;
    this.setupHandlers();
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    this.bot.command('admin', this.handleAdminCommand.bind(this));
    this.bot.command('admin_inline', this.handleAdminInlineCommand.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    this.bot.hears('üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', this.handleUsersList.bind(this));
    this.bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', this.handleStats.bind(this));
    this.bot.hears('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', this.handleSearch.bind(this));
    this.bot.hears('üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', this.handleSendMessage.bind(this));
    this.bot.hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', this.handleSettings.bind(this));
    this.bot.hears('üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', this.handleBackToMain.bind(this));
    this.bot.hears('üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', this.handleBackToAdmin.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    this.bot.action('admin_interface_inline', this.handleInlineInterface.bind(this));
    this.bot.action('admin_interface_reply', this.handleReplyInterface.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    this.bot.action('admin_stats', this.handleStats.bind(this));
    this.bot.action('admin_search', this.handleSearch.bind(this));
    this.bot.action('admin_send_message', this.handleSendMessage.bind(this));
    this.bot.action('admin_settings', this.handleSettings.bind(this));
    this.bot.action('admin_back_to_main', this.handleBackToMain.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.bot.action(/admin_user_profile_(\d+)/, this.handleUserProfile.bind(this));
    this.bot.action(/admin_user_results_(\d+)/, this.handleUserResults.bind(this));
    this.bot.action(/admin_user_message_(\d+)/, this.handleUserMessage.bind(this));
    this.bot.action(/admin_user_details_(\d+)/, this.handleUserDetails.bind(this));
    this.bot.action(/admin_make_admin_(\d+)/, this.handleMakeAdmin.bind(this));
    this.bot.action(/admin_delete_user_(\d+)/, this.handleDeleteUser.bind(this));
    this.bot.action('admin_back', this.handleAdminBack.bind(this));
    this.bot.action('admin_users_list', this.handleUsersList.bind(this));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async checkAdminRights(ctx) {
    const userId = ctx.from.id;
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    
    const isAdmin = await userService.isAdmin(userId);
    console.log('üîê –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ isAdmin:', isAdmin);
    
    if (!isAdmin) {
      console.log('‚ùå –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
      return false;
    }
    
    console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    return true;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
  async handleAdminCommand(ctx) {
    console.log('üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    
    if (!(await this.checkAdminRights(ctx))) {
      console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º');
      return;
    }

    const userId = ctx.from.id;
    adminStates.set(userId, { currentSection: 'main' });
    console.log('‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    const keyboard = getAdminMainKeyboard();
    console.log('üîß Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', JSON.stringify(keyboard, null, 2));

    await ctx.reply(
      'üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async handleUsersList(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.from.id;
    adminStates.set(userId, { currentSection: 'users_list', page: 1 });

    await this.showUsersList(ctx, 1);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async showUsersList(ctx, page = 1) {
    try {
      const limit = 10;
      const offset = (page - 1) * limit;
      
      const users = await userService.getAllUsers(limit, offset);
      const stats = await userService.getUsersStats();
      
      let message = `üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page})\n\n`;
      
      if (users.length === 0) {
        message += '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      } else {
        users.forEach((user, index) => {
          const adminBadge = user.is_admin ? ' üëë' : '';
          const name = user.first_name || user.username || `User${user.telegram_id}`;
          const testsCount = user.tests_count || 0;
          const lastTest = user.last_test_date ? 
            new Date(user.last_test_date).toLocaleDateString('ru-RU') : '–ù–µ—Ç';
          
          message += `${index + 1}. ${name}${adminBadge}\n`;
          message += `   ID: \`${user.telegram_id}\`\n`;
          message += `   –¢–µ—Å—Ç–æ–≤: ${testsCount} | –ü–æ—Å–ª–µ–¥–Ω–∏–π: ${lastTest}\n\n`;
        });
      }
      
      const totalPages = Math.ceil(stats.total_users / limit);
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: getUsersListKeyboard()
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const adminUserId = ctx.from.id;
      adminStates.set(adminUserId, { 
        currentSection: 'users_list', 
        page: page,
        totalPages: totalPages
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async handleStats(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.from.id;
    adminStates.set(userId, { currentSection: 'stats' });

    try {
      const userStats = await userService.getUsersStats();
      const testStats = await testResultService.getTestStats();
      const popularArchetypes = await testResultService.getPopularArchetypes(5);

      let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n`;
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      message += `üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ: ${userStats.total_users}\n`;
      message += `‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${userStats.admin_users}\n`;
      message += `‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: ${userStats.new_users_week}\n`;
      message += `‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: ${userStats.new_users_month}\n\n`;
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
      message += `üìà *–¢–µ—Å—Ç—ã:*\n`;
      message += `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö: ${testStats.unique_testers || 0}\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${testStats.total_results || 0}\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${Math.round(testStats.avg_score || 0)}\n`;
      message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π: ${testStats.active_days || 0}\n\n`;
      
      // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã
      if (popularArchetypes.length > 0) {
        message += `üèÜ *–¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤:*\n`;
        popularArchetypes.forEach((archetype, index) => {
          message += `${index + 1}. ${archetype.archetype_name}: ${archetype.count} —Ä–∞–∑\n`;
        });
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: getStatsKeyboard()
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  async handleSearch(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.from.id;
    adminStates.set(userId, { currentSection: 'search', waitingFor: 'query' });

    await ctx.reply(
      'üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è, username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
      {
        parse_mode: 'Markdown',
        reply_markup: getSearchKeyboard()
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleSendMessage(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.from.id;
    adminStates.set(userId, { currentSection: 'send_message' });

    await ctx.reply(
      'üì® *–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:',
      {
        parse_mode: 'Markdown',
        reply_markup: getMessageKeyboard()
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  async handleSettings(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.from.id;
    adminStates.set(userId, { currentSection: 'settings' });

    await ctx.reply(
      '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: getSettingsKeyboard()
      }
    );
  }

  // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  async handleBackToMain(ctx) {
    const userId = ctx.from.id;
    adminStates.delete(userId);

    await ctx.reply(
      'üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...',
      {
        reply_markup: { remove_keyboard: true }
      }
    );
  }

  // –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
  async handleBackToAdmin(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.from.id;
    adminStates.set(userId, { currentSection: 'main' });

    await ctx.reply(
      'üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: getAdminMainKeyboard()
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async handleUserProfile(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.match[1];
    
    try {
      const userInfo = await testResultService.getUserDetailedInfo(userId);
      
      if (!userInfo) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const { user, testResults, testCount, answersStats } = userInfo;
      
      let message = `üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n`;
      message += `*ID:* \`${user.telegram_id}\`\n`;
      message += `*–ò–º—è:* ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `*Username:* ${user.username ? '@' + user.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* ${user.is_admin ? '–î–∞' : '–ù–µ—Ç'}\n`;
      message += `*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* ${new Date(user.created_at).toLocaleDateString('ru-RU')}\n`;
      message += `*–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤:* ${testCount}\n`;
      message += `*–û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:* ${answersStats.total_answers || 0}\n\n`;

      if (testResults.length > 0) {
        message += `*–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n`;
        testResults.forEach((result, index) => {
          message += `${index + 1}. ${result.archetype_name}: ${result.score} –±–∞–ª–ª–æ–≤ (${result.percentage}%)\n`;
        });
      } else {
        message += `*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:* –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: getUserActionsInlineKeyboard(userId)
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async handleUserResults(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.match[1];
    
    try {
      const results = await testResultService.getUserTestResults(userId);
      
      if (results.length === 0) {
        await ctx.reply('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        return;
      }

      let message = `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}*\n\n`;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–∞—Ç–µ
      const resultsByDate = {};
      results.forEach(result => {
        const date = new Date(result.created_at).toLocaleDateString('ru-RU');
        if (!resultsByDate[date]) {
          resultsByDate[date] = [];
        }
        resultsByDate[date].push(result);
      });

      Object.entries(resultsByDate).forEach(([date, dateResults]) => {
        message += `üìÖ *${date}:*\n`;
        dateResults
          .filter(r => r.position === 1) // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –º–µ—Å—Ç–∞
          .forEach(result => {
            message += `‚Ä¢ ${result.archetype_name}: ${result.score} –±–∞–ª–ª–æ–≤ (${result.percentage}%)\n`;
          });
        message += '\n';
      });

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: getUserActionsInlineKeyboard(userId)
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async handleUserMessage(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.match[1];
    const adminUserId = ctx.from.id;
    
    adminStates.set(adminUserId, { 
      currentSection: 'send_user_message', 
      targetUserId: userId,
      waitingFor: 'message'
    });

    await ctx.reply(
      `üì® *–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}*\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:`,
      {
        parse_mode: 'Markdown',
        reply_markup: { remove_keyboard: true }
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async handleUserDetails(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.match[1];
    
    try {
      const userInfo = await testResultService.getUserDetailedInfo(userId);
      const answers = await testResultService.getUserAnswers(userId);
      
      if (!userInfo) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const { user, answersStats } = userInfo;
      
      let message = `üîç *–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n`;
      message += `*ID:* \`${user.telegram_id}\`\n`;
      message += `*–ò–º—è:* ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `*–§–∞–º–∏–ª–∏—è:* ${user.last_name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
      message += `*Username:* ${user.username ? '@' + user.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `*–Ø–∑—ã–∫:* ${user.language_code || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* ${user.is_admin ? '–î–∞' : '–ù–µ—Ç'}\n`;
      message += `*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* ${new Date(user.created_at).toLocaleString('ru-RU')}\n`;
      message += `*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* ${new Date(user.updated_at).toLocaleString('ru-RU')}\n\n`;
      
      message += `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:*\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: ${answersStats.total_answers || 0}\n`;
      message += `‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–µ–Ω–æ: ${answersStats.questions_answered || 0}\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç: ${Math.round(answersStats.avg_answer || 0)}\n\n`;

      if (answers.length > 0) {
        message += `*–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–≤–µ—Ç–æ–≤:*\n`;
        answers.slice(-10).forEach((answer, index) => {
          const answerText = ['–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω', '–°–∫–æ—Ä–µ–µ –¥–∞', '–ù–µ –∑–Ω–∞—é', '–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω'][answer.answer_value];
          message += `${index + 1}. –í–æ–ø—Ä–æ—Å ${answer.question_index + 1} (${answer.archetype}): ${answerText}\n`;
        });
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: getUserActionsInlineKeyboard(userId)
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async handleMakeAdmin(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.match[1];
    const adminUserId = ctx.from.id;
    
    try {
      const user = await userService.getUserByTelegramId(userId);
      if (!user) {
        await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const newAdminStatus = !user.is_admin;
      await userService.setAdminStatus(userId, newAdminStatus);

      await ctx.reply(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} ${newAdminStatus ? '–Ω–∞–∑–Ω–∞—á–µ–Ω' : '—Å–Ω—è—Ç —Å –ø–æ—Å—Ç–∞'} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`,
        {
          reply_markup: getUserActionsInlineKeyboard(userId)
        }
      );
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async handleDeleteUser(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    const userId = ctx.match[1];
    
    await ctx.reply(
      `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`,
      {
        parse_mode: 'Markdown',
        reply_markup: getConfirmationKeyboard()
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
  async handleAdminBack(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    await this.handleBackToAdmin(ctx);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async handleUsersList(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;

    await this.showUsersList(ctx, 1);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  async handleTextMessage(ctx) {
    const userId = ctx.from.id;
    const state = adminStates.get(userId);
    
    if (!state) return false; // –ù–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

    const text = ctx.message.text;

    try {
      switch (state.currentSection) {
        case 'search':
          if (state.waitingFor === 'query') {
            await this.handleSearchQuery(ctx, text);
          }
          break;
          
        case 'send_user_message':
          if (state.waitingFor === 'message') {
            await this.handleSendUserMessage(ctx, text);
          }
          break;
          
        default:
          return false; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
      }
      
      return true; // –û–±—Ä–∞–±–æ—Ç–∞–ª–∏
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
      return true;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  async handleSearchQuery(ctx, query) {
    const userId = ctx.from.id;
    
    try {
      const users = await userService.searchUsers(query, 10);
      
      if (users.length === 0) {
        await ctx.reply('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', {
          reply_markup: getSearchKeyboard()
        });
        return;
      }

      let message = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${query}"*\n\n`;
      
      users.forEach((user, index) => {
        const adminBadge = user.is_admin ? ' üëë' : '';
        const name = user.first_name || user.username || `User${user.telegram_id}`;
        
        message += `${index + 1}. ${name}${adminBadge}\n`;
        message += `   ID: \`${user.telegram_id}\`\n`;
        message += `   –î–∞—Ç–∞: ${new Date(user.created_at).toLocaleDateString('ru-RU')}\n\n`;
      });

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: getSearchKeyboard()
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
      adminStates.set(userId, { currentSection: 'search' });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async handleSendUserMessage(ctx, messageText) {
    const userId = ctx.from.id;
    const state = adminStates.get(userId);
    
    try {
      const targetUserId = state.targetUserId;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.bot.telegram.sendMessage(targetUserId, 
        `üì® *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n${messageText}`, 
        { parse_mode: 'Markdown' }
      );

      await ctx.reply(
        `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${targetUserId}.`,
        {
          reply_markup: getAdminMainKeyboard()
        }
      );
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      adminStates.set(userId, { currentSection: 'main' });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.',
        {
          reply_markup: getAdminMainKeyboard()
        }
      );
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      adminStates.set(userId, { currentSection: 'main' });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ inline –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  async handleInlineInterface(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;
    
    await ctx.answerCbQuery();
    await ctx.editMessageText(
      'üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: getAdminMainInlineKeyboard()
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ reply –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  async handleReplyInterface(ctx) {
    if (!(await this.checkAdminRights(ctx))) return;
    
    await ctx.answerCbQuery();
    await ctx.reply(
      'üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: getAdminMainKeyboard()
      }
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_inline
  async handleAdminInlineCommand(ctx) {
    console.log('üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_inline –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    
    if (!(await this.checkAdminRights(ctx))) {
      console.log('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º');
      return;
    }

    const userId = ctx.from.id;
    adminStates.set(userId, { currentSection: 'main' });
    console.log('‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º inline –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    const inlineKeyboard = getAdminMainInlineKeyboard();
    console.log('üîß Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', JSON.stringify(inlineKeyboard, null, 2));

    await ctx.reply(
      'üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (Inline)*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: inlineKeyboard
      }
    );
  }
}

module.exports = AdminPanelHandler; 