---
alwaysApply: true
---

# ПРАВИЛА ПРЕДОТВРАЩЕНИЯ ОШИБОК В РАЗРАБОТКЕ

## ОБЯЗАТЕЛЬНЫЕ ПРИНЦИПЫ:

### 1. ДОКУМЕНТАЦИЯ ПРЕЖДЕ ВСЕГО
- ВСЕГДА читай официальную документацию библиотеки/API
- Проверяй версию библиотеки и совместимость методов
- Изучай примеры использования перед написанием кода
- НЕ предполагай существование методов - проверяй

### 2. ПРОВЕРКА СИНТАКСИСА И API
- Проверяй синтаксис: node -c filename.js
- Тестируй API методы в изоляции
- Используй TypeScript или JSDoc для типизации
- Проверяй структуру объектов и параметров

### 3. ПОЭТАПНОЕ ТЕСТИРОВАНИЕ
- Пиши код пошагово, тестируя каждую часть
- Проверяй работу функций отдельно
- Используй console.log для отладки
- Не коммить код, который не протестирован

### 4. ОБРАБОТКА ОШИБОК
- Всегда используй try-catch для внешних API
- Проверяй существование методов: if (obj.method)
- Логируй ошибки с полным контекстом
- Предусматривай fallback варианты

### 5. АРХИТЕКТУРНЫЕ РЕШЕНИЯ
- Изучи ограничения технологии перед проектированием
- Проверь совместимость компонентов
- Используй простые, проверенные решения
- Избегай сложных интеграций без тестирования

## ПРОЦЕСС РАЗРАБОТКИ:
1. Изучи документацию
2. Проверь примеры
3. Напиши минимальный тест
4. Постепенно добавляй функционал
5. Тестируй на каждом этапе
6. Проверяй синтаксис
7. Коммить только рабочий код

## ЗАПРЕЩЕНО:
- Использовать недокументированные методы
- Копировать код без понимания
- Игнорировать ошибки компиляции
- Пропускать тестирование
- Коммитить нерабочий код
# ПРАВИЛА ПРЕДОТВРАЩЕНИЯ ОШИБОК В РАЗРАБОТКЕ

## ОБЯЗАТЕЛЬНЫЕ ПРИНЦИПЫ:

### 1. ДОКУМЕНТАЦИЯ ПРЕЖДЕ ВСЕГО
- ВСЕГДА читай официальную документацию библиотеки/API
- Проверяй версию библиотеки и совместимость методов
- Изучай примеры использования перед написанием кода
- НЕ предполагай существование методов - проверяй

### 2. ПРОВЕРКА СИНТАКСИСА И API
- Проверяй синтаксис: node -c filename.js
- Тестируй API методы в изоляции
- Используй TypeScript или JSDoc для типизации
- Проверяй структуру объектов и параметров

### 3. ПОЭТАПНОЕ ТЕСТИРОВАНИЕ
- Пиши код пошагово, тестируя каждую часть
- Проверяй работу функций отдельно
- Используй console.log для отладки
- Не коммить код, который не протестирован

### 4. ОБРАБОТКА ОШИБОК
- Всегда используй try-catch для внешних API
- Проверяй существование методов: if (obj.method)
- Логируй ошибки с полным контекстом
- Предусматривай fallback варианты

### 5. АРХИТЕКТУРНЫЕ РЕШЕНИЯ
- Изучи ограничения технологии перед проектированием
- Проверь совместимость компонентов
- Используй простые, проверенные решения
- Избегай сложных интеграций без тестирования

## ПРОЦЕСС РАЗРАБОТКИ:
1. Изучи документацию
2. Проверь примеры
3. Напиши минимальный тест
4. Постепенно добавляй функционал
5. Тестируй на каждом этапе
6. Проверяй синтаксис
7. Коммить только рабочий код

## ЗАПРЕЩЕНО:
- Использовать недокументированные методы
- Копировать код без понимания
- Игнорировать ошибки компиляции
- Пропускать тестирование
- Коммитить нерабочий код
