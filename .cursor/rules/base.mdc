---
alwaysApply: true
---
ОБЯЗАТЕЛЬНЫЕ ПРИНЦИПЫ 
 
1. АБСОЛЮТНАЯ ТОЧНОСТЬ 
 
Каждая строка кода должна быть проверена на корректность 
 
Никаких синтаксических ошибок, опечаток или неточностей 
 
Все импорты, зависимости и версии должны быть валидными 
 
Проверяй совместимость между компонентами 
 
 
2. БЕЗОПАСНОСТЬ НА ПЕРВОМ МЕСТЕ 
 
Защита от всех видов инъекций (SQL, XSS, CSRF, XXE и др.) 
 
Валидация и санитизация всех входных данных 
 
Принцип минимальных привилегий 
 
Безопасное хранение паролей и токенов (хеширование, шифрование) 
 
Защита от race conditions и buffer overflow 
 
Обработка ошибок без утечки конфиденциальной информации 
 
 
3. АРХИТЕКТУРНОЕ СОВЕРШЕНСТВО 
 
Следуй SOLID принципам неукоснительно 
 
Применяй подходящие паттерны проектирования 
 
Разделение ответственности и слабая связанность 
 
Высокая когезия модулей 
 
Принцип DRY без фанатизма 
 
Clean Architecture / Hexagonal Architecture где применимо 
 
 
4. ПРОИЗВОДИТЕЛЬНОСТЬ И МАСШТАБИРУЕМОСТЬ 
 
Оптимальная сложность алгоритмов (O-нотация) 
 
Эффективное использование памяти 
 
Асинхронность где необходимо 
 
Кеширование на разных уровнях 
 
Ленивая загрузка и пагинация 
 
Индексы для баз данных 
 
Connection pooling 
 
 
5. КАЧЕСТВО КОДА 
 
Читаемый, самодокументируемый код 
 
Осмысленные имена переменных и функций 
 
Комментарии только для сложной бизнес-логики 
 
Консистентный стиль кодирования 
 
Избегание магических чисел и строк 
 
Функции не более 30 строк  
 
6. СТАНДАРТЫ И BEST PRACTICES 
 
Следование стандартам языка 
 
Semantic Versioning 
 
Conventional Commits 
 
RESTful API design 
 
OpenAPI/Swagger документация 
 
Линтеры и форматтеры 
 
 
7. ТЕСТИРОВАНИЕ И ОТЛАДКА 
 
Unit тесты с покрытием >80% 
 
Integration и E2E тесты 
 
Тестирование граничных случаев 
 
Моки и стабы где необходимо 
 
TDD подход где применимо 
 
 
8. ОБРАБОТКА ОШИБОК И ИСКЛЮЧЕНИЙ 
 
Graceful degradation 
 
Retry механизмы с экспоненциальным backoff 
 
Circuit breaker паттерн 
 
Rollback стратегии 
 
Детальное логирование ошибок 
 
User-friendly сообщения об ошибках 
 
 
ПРОЦЕСС РАЗРАБОТКИ 
 
ПЕРЕД НАПИСАНИЕМ КОДА: 
 
1. АНАЛИЗ: Тщательно изучи требования 

2. АРХИТЕКТУРА: Спроектируй структуру решения 
 
3. ТЕХНОЛОГИИ: Выбери оптимальный стек 
 
4. БЕЗОПАСНОСТЬ: Определи потенциальные угрозы 

5. ПРОИЗВОДИТЕЛЬНОСТЬ: Оцени нагрузку и масштабируемость 
 
 
 
ВО ВРЕМЯ НАПИСАНИЯ: 
 
1. Каждая функция должна решать одну задачу 

2. Проверяй каждую строку на корректность 

3. Добавляй проверки входных данных 
4. Обрабатывай все возможные исключения 
5. Используй типизацию 
 
 
 
ПОСЛЕ НАПИСАНИЯ: 
 
1. РЕВЬЮ: Критически оцени код 
2. ТЕСТИРОВАНИЕ: Проверь все сценарии 
3. РЕФАКТОРИНГ: Оптимизируй если необходимо 
4. ДОКУМЕНТАЦИЯ: Добавь необходимые комментарии 
 
СПЕЦИФИЧЕСКИЕ ТРЕБОВАНИЯ 
 
ДЛЯ WEB-РАЗРАБОТКИ: 
 
HTTPS везде 
 
CSP заголовки 
 
CORS правильно настроен 
 
Rate limiting 
 
Валидация на клиенте И сервере 
 
 

 
ДЛЯ API: 
 
Версионирование 
 
Rate limiting 
 
Аутентификация и авторизация 
 
Идемпотентность операций 
 
Правильные HTTP статус коды 
 
 
ОБЯЗАТЕЛЬНО ИЗБЕГАТЬ: 
 
Хардкод значений 
 
SQL инъекций 
 
XSS уязвимостей 
 
Утечек памяти 
 
Блокирующих операций в UI потоке 
 
Использования устаревших зависимостей 
 
Игнорирования ошибок 
 
Копирования кода без понимания 
 
 
ФИНАЛЬНАЯ ПРОВЕРКА: 
 
Перед выдачей кода обязательно проверь: 
✅ Синтаксис корректен 
✅ Безопасность соблюдена 
✅ Производительность оптимальна 
✅ Код читаем и поддерживаем 
✅ Стандарты соблюдены 
✅ Ошибки обработаны 
✅ Тесты покрывают функционал

alwaysApply: true