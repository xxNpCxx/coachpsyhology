---
alwaysApply: true
---
# ü§ñ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Telegram Bot - Node.js + Telegraf

## üèóÔ∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê

```
project/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ bot.js                 # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞, middleware pipeline
‚îÇ   ‚îú‚îÄ‚îÄ config.js              # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ commands/              # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (/start, /help)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ start.js
‚îÇ   ‚îú‚îÄ‚îÄ scenes/                # FSM —Å—Ü–µ–Ω—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ buy.scene.js
‚îÇ   ‚îú‚îÄ‚îÄ handlers/              # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ menu.js
‚îÇ   ‚îú‚îÄ‚îÄ actions/               # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–æ–∫
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ userActions.js
‚îÇ   ‚îú‚îÄ‚îÄ pg/                    # –°–ª–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ users.pg.js
‚îÇ   ‚îú‚îÄ‚îÄ utils/                 # –£—Ç–∏–ª–∏—Ç—ã
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logger.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ settings.pg.js
‚îÇ   ‚îî‚îÄ‚îÄ keyboards.js           # UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚îú‚îÄ‚îÄ migrations/                # SQL –º–∏–≥—Ä–∞—Ü–∏–∏
‚îÇ   ‚îî‚îÄ‚îÄ 001_create_users.sql
‚îú‚îÄ‚îÄ tests/                     # –¢–µ—Å—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ unit/
‚îÇ   ‚îî‚îÄ‚îÄ integration/
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ eslint.config.js
‚îî‚îÄ‚îÄ jest.config.js
```

## üîß –¢–û–ß–ö–ê –í–•–û–î–ê (bot.js)

### –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:

```javascript
import { Telegraf, session, Scenes } from "telegraf";
import express from "express";

// 1. –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import { BOT_TOKEN, pool } from "./config.js";

// 2. –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–∞–Ω–¥
import { registerStartCommand } from "./commands/start.js";

// 3. –ò–º–ø–æ—Ä—Ç—ã —Å—Ü–µ–Ω
import { buyScene } from "./scenes/buy.scene.js";

// 4. –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
import { registerMenuHandlers } from "./handlers/menu.js";

// 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// 6. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–û–†–Ø–î–û–ö MIDDLEWARE:
bot.use(session({ defaultSession: () => ({}) }));
bot.use(globalMiddleware);  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–∞–ª–∏–¥–∞—Ü–∏—è
bot.use(stage.middleware()); // FSM —Å—Ü–µ–Ω—ã –ü–û–°–õ–ï session

// 7. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
registerStartCommand(bot, handleStart);
const stage = new Scenes.Stage([buyScene]);

// 8. Webhook + Express
const app = express();
app.use(`/${BOT_TOKEN}`, (req, res) => {
  bot.handleUpdate(req.body, res);
});
```

## üìù –ü–ê–¢–¢–ï–†–ù –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ö–û–ú–ê–ù–î

### ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
```javascript
// commands/start.js
export function registerStartCommand(bot, handleStart) {
  bot.start(async (ctx) => {
    await handleStart(ctx);
  });
  
  bot.command("start", async (ctx) => {
    await handleStart(ctx);
  });
}
```

### ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û - –ü—Ä—è–º–∞—è –ø—Ä–∏–≤—è–∑–∫–∞:
```javascript
// –ù–ï –î–ï–õ–ê–ô –¢–ê–ö!
bot.command('start', async (ctx) => {
  // –ª–æ–≥–∏–∫–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
});
```

## üé≠ FSM –°–¶–ï–ù–´ (Finite State Machine)

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ü–µ–Ω—ã:
```javascript
// scenes/buy.scene.js
import { Scenes } from "telegraf";

export const buyScene = new Scenes.BaseScene("buy");

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
buyScene.enter(async (ctx) => {
  const data = ctx.callbackQuery?.data;
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  ctx.session.buy = { currency: data.split('_')[1] };
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
buyScene.on('text', async (ctx) => {
  const amount = parseFloat(ctx.message.text);
  if (isNaN(amount)) {
    await ctx.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞");
    return;
  }
  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
  ctx.session.buy.amount = amount;
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
buyScene.action('cancel', async (ctx) => {
  await ctx.scene.leave();
  await sendMainMenu(ctx);
});

// –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
buyScene.leave(async (ctx) => {
  delete ctx.session.buy;
});
```

## üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô

### –ü–∞—Ç—Ç–µ—Ä–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ handlers:
```javascript
// handlers/menu.js
export function registerMenuHandlers(bot, stage) {
  // Inline –∫–Ω–æ–ø–∫–∏
  bot.action('buy_BTC', async (ctx) => {
    await ctx.scene.enter('buy');
  });
  
  // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
  bot.hears('üí∞ –ú–æ–∏ —Å–¥–µ–ª–∫–∏', async (ctx) => {
    await handleMyDeals(ctx);
  });
}
```

## üóÑÔ∏è –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•

### –°–ª–æ–π pg/ - –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
```javascript
// pg/users.pg.js
import { pool } from '../config.js';

export async function upsertUser(ctx) {
  const u = ctx.from;
  try {
    const result = await pool.query(
      `INSERT INTO users (telegram_id, username, first_name)
       VALUES ($1, $2, $3)
       ON CONFLICT (telegram_id) DO UPDATE
       SET username = EXCLUDED.username`,
      [u.id, u.username, u.first_name]
    );
    return result.rows[0];
  } catch (err) {
    console.error('[users][pg] –û—à–∏–±–∫–∞:', err);
    throw err;
  }
}
```

### –°–ò–°–¢–ï–ú–ê –ú–ò–ì–†–ê–¶–ò–ô:
```javascript
// migrate.js
async function runMigrations() {
  await ensureMigrationsTable();
  const applied = await getAppliedMigrations();
  
  const files = fs.readdirSync('migrations')
    .filter(f => f.endsWith('.sql'))
    .sort();
    
  for (const file of files) {
    if (!applied.has(file)) {
      const sql = fs.readFileSync(`migrations/${file}`, 'utf8');
      await applyMigration(file, sql);
    }
  }
}
```

## ‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø

### config.js - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
```javascript
import dotenv from 'dotenv';
import { Pool } from 'pg';

dotenv.config();

export const BOT_TOKEN = process.env.BOT_TOKEN;
export const ADMIN_USER_ID = process.env.ADMIN_USER_ID;

export const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? 
    { rejectUnauthorized: false } : false
});
```

## üñ•Ô∏è UI –ö–û–ú–ü–û–ù–ï–ù–¢–´ (–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã)

### –ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è UI:
```javascript
// keyboards.js
import { Markup } from 'telegraf';

export function buildMainInlineMenuRows(currencies) {
  const buyRows = Object.keys(currencies).map(cur => 
    [{ text: `üí∏ –ö—É–ø–∏—Ç—å ${cur}`, callback_data: `buy_${cur}` }]
  );
  return [
    ...buyRows,
    [{ text: 'üí∞ –ú–æ–∏ —Å–¥–µ–ª–∫–∏', callback_data: 'my_deals' }],
  ];
}

export function mainInlineMenu() {
  const rows = buildMainInlineMenuRows(CURRENCIES);
  return Markup.inlineKeyboard(rows);
}
```

## üìä –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø

### –ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —á–µ—Ä–µ–∑ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
```javascript
// utils/logger.js
const isLogEnabled = (logType) => process.env[logType] === "true";

export const logger = {
  debug: (...args) => {
    if (isLogEnabled('DEBUG_LOGS')) {
      console.log('[DEBUG]', ...args);
    }
  },
  error: (...args) => console.error('‚ùå [ERROR]', ...args),
  info: (...args) => console.log('‚úÖ [INFO]', ...args),
};

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
// DEBUG_LOGS=true - –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏
// MEGA_LOGS=true - –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
// FSM_LOGS=true - –ª–æ–≥–∏ —Å—Ü–µ–Ω
```

## üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨

### 1. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:
```javascript
// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
await pool.query('SELECT * FROM users WHERE id = $1', [userId]);

// ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
await pool.query(`SELECT * FROM users WHERE id = ${userId}`);
```

### 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π:
```javascript
export async function checkRole(userId, role) {
  const result = await pool.query(
    'SELECT value FROM settings WHERE key = $1',
    [`${role}_users`]
  );
  const users = JSON.parse(result.rows[0]?.value || '[]');
  return users.includes(userId);
}
```

### 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:
```javascript
export function validateAmount(amount) {
  const num = parseFloat(amount);
  if (isNaN(num) || num <= 0) {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞');
  }
  return num;
}
```

## üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï

### Jest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
```javascript
// jest.config.js
export default {
  testEnvironment: 'node',
  transform: {},
  testMatch: ["**/tests/**/*.test.mjs"],
};
```

### Unit —Ç–µ—Å—Ç –ø—Ä–∏–º–µ—Ä:
```javascript
// tests/unit/keyboards.test.mjs
import { buildMainInlineMenuRows } from '../../src/keyboards.js';

test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é', () => {
  const currencies = { BTC: 'bitcoin' };
  const rows = buildMainInlineMenuRows(currencies);
  
  expect(rows[0][0]).toEqual({
    text: 'üí∏ –ö—É–ø–∏—Ç—å BTC',
    callback_data: 'buy_BTC'
  });
});
```

## üì¶ PACKAGE.JSON

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã:
```json
{
  "type": "module",
  "scripts": {
    "start": "node src/bot.js",
    "dev": "nodemon src/bot.js",
    "migrate": "node src/migrate.js",
    "test": "jest",
    "test:unit": "jest tests/unit/",
    "lint": "eslint src/",
    "lint:fix": "eslint src/ --fix"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}
```

## üö´ –ó–ê–ü–†–ï–©–ï–ù–û

1. **–°–º–µ—à–∏–≤–∞–Ω–∏–µ inline –∏ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏**
2. **–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã**
3. **–ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SQL –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤**
4. **–•–∞—Ä–¥–∫–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ –∏ ID –≤ –∫–æ–¥–µ**
5. **Middleware –ø–æ—Å–ª–µ stage.middleware() –¥–ª—è FSM**
6. **–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è**

## ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û

1. **Session middleware –ü–ï–†–ï–î stage.middleware()**
2. **–§—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤**
3. **–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î (pg/)**
4. **–°–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ë–î**
5. **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫**
6. **–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö**
7. **Health check endpoint**

## üéØ –ß–ï–ö–õ–ò–°–¢ –ù–û–í–û–ì–û –ü–†–û–ï–ö–¢–ê

- [ ] –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –ø–æ —à–∞–±–ª–æ–Ω—É
- [ ] –ù–∞—Å—Ç—Ä–æ–µ–Ω config.js —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
- [ ] –°–æ–∑–¥–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
- [ ] –ù–∞—Å—Ç—Ä–æ–µ–Ω middleware pipeline –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
- [ ] –°–æ–∑–¥–∞–Ω—ã FSM —Å—Ü–µ–Ω—ã –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
- [ ] –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î
- [ ] –î–æ–±–∞–≤–ª–µ–Ω—ã unit —Ç–µ—Å—Ç—ã
- [ ] –ù–∞—Å—Ç—Ä–æ–µ–Ω ESLint
- [ ] –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- [ ] –°–æ–∑–¥–∞–Ω health check endpoint

---

**–≠—Ç–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å, —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ production-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞!**
description:
globs:
alwaysApply: false
---
