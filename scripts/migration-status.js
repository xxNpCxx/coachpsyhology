require('dotenv').config();
const { pool } = require('../config/database');
const fs = require('fs');
const path = require('path');

async function checkMigrationStatus() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–π...');
  
  if (!process.env.DATABASE_URL) {
    console.error('‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    process.exit(1);
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π
    const tableExists = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'migrations'
      );
    `);

    if (!tableExists.rows[0].exists) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ migrations –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run migrate');
      client.release();
      await pool.end();
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    const appliedMigrations = await client.query('SELECT filename, applied_at FROM migrations ORDER BY applied_at');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π
    const migrationsDir = path.join(__dirname, '..', 'migrations');
    const migrationFiles = fs.readdirSync(migrationsDir)
      .filter(f => f.endsWith('.sql'))
      .sort();

    console.log('\nüìã –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:');
    console.log('‚îÄ'.repeat(60));

    let allApplied = true;
    for (const file of migrationFiles) {
      const applied = appliedMigrations.rows.find(row => row.filename === file);
      
      if (applied) {
        const date = new Date(applied.applied_at).toLocaleString('ru-RU');
        console.log(`‚úÖ ${file} - –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ ${date}`);
      } else {
        console.log(`‚ùå ${file} - –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`);
        allApplied = false;
      }
    }

    console.log('‚îÄ'.repeat(60));
    
    if (allApplied) {
      console.log('üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
    } else {
      console.log('‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏');
      console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run migrate');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π: ${migrationFiles.length}`);
    console.log(`   –ü—Ä–∏–º–µ–Ω–µ–Ω–æ: ${appliedMigrations.rows.length}`);
    console.log(`   –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: ${migrationFiles.length - appliedMigrations.rows.length}`);

    client.release();
    await pool.end();

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL');
      console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞');
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  checkMigrationStatus();
}

module.exports = { checkMigrationStatus }; 