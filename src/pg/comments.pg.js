import { pool } from '../config.js';

/**
 * –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É
 */

export class CommentsPG {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  async saveComment(userId, messageId, chatId, text, timestamp) {
    try {
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —á–∞—Ç–µ ${chatId}`);
      
      await pool.query(`
        INSERT INTO comments (user_id, message_id, chat_id, text, created_at)
        VALUES ($1::bigint, $2::bigint, $3::bigint, $4, $5)
        ON CONFLICT (user_id, message_id, chat_id) DO NOTHING
      `, [userId, messageId, chatId, text, timestamp]);
      
      console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ saveComment:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ
  async getUserCommentCount(userId, chatId) {
    try {
      console.log(`üîç [–ë–î] –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —á–∞—Ç–µ ${chatId}`);
      
      const result = await pool.query(`
        SELECT COUNT(*) as comment_count
        FROM comments 
        WHERE user_id = $1::bigint AND chat_id = $2::bigint
      `, [userId, chatId]);
      
      const count = parseInt(result.rows[0]?.comment_count || 0);
      console.log(`üìä [–ë–î] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${count}`);
      
      return count;
    } catch (error) {
      console.error('‚ùå [–ë–î] –û—à–∏–±–∫–∞ getUserCommentCount:', error);
      console.error('‚ùå [–ë–î] Stack trace:', error.stack);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserTestCount(userId) {
    try {
      console.log(`üîç [–ë–î] –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      
      const result = await pool.query(`
        SELECT COUNT(DISTINCT DATE(created_at)) as test_count
        FROM test_results 
        WHERE user_id = $1::bigint
      `, [userId]);
      
      const count = parseInt(result.rows[0]?.test_count || 0);
      console.log(`üìä [–ë–î] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: ${count}`);
      
      return count;
    } catch (error) {
      console.error('‚ùå [–ë–î] –û—à–∏–±–∫–∞ getUserTestCount:', error);
      console.error('‚ùå [–ë–î] Stack trace:', error.stack);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
  async canUserTakeTest(userId, chatId) {
    try {
      console.log(`üîç [–ë–î] –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —á–∞—Ç–µ ${chatId}`);
      
      const [commentCount, testCount] = await Promise.all([
        this.getUserCommentCount(userId, chatId),
        this.getUserTestCount(userId)
      ]);
      
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ >= –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      const canTake = commentCount >= testCount;
      
      console.log(`üìä [–ë–î] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏=${commentCount}, —Ç–µ—Å—Ç—ã=${testCount}, –º–æ–∂–Ω–æ=${canTake}`);
      
      return {
        canTake,
        commentCount,
        testCount,
        requiredComments: testCount
      };
    } catch (error) {
      console.error('‚ùå [–ë–î] –û—à–∏–±–∫–∞ canUserTakeTest:', error);
      console.error('‚ùå [–ë–î] Stack trace:', error.stack);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserRecentComments(userId, chatId, limit = 5) {
    try {
      const result = await pool.query(`
        SELECT * FROM comments 
        WHERE user_id = $1::bigint AND chat_id = $2::bigint
        ORDER BY created_at DESC 
        LIMIT $3
      `, [userId, chatId, limit]);
      
      return result.rows;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getUserRecentComments:', error);
      throw error;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async deleteComment(userId, messageId, chatId) {
    try {
      const result = await pool.query(`
        DELETE FROM comments 
        WHERE user_id = $1::bigint AND message_id = $2::bigint AND chat_id = $3::bigint
      `, [userId, messageId, chatId]);
      
      return result.rowCount > 0;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ deleteComment:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  async getCommentStats(chatId) {
    try {
      const result = await pool.query(`
        SELECT 
          COUNT(*) as total_comments,
          COUNT(DISTINCT user_id) as unique_users,
          MIN(created_at) as first_comment,
          MAX(created_at) as last_comment
        FROM comments 
        WHERE chat_id = $1::bigint
      `, [chatId]);
      
      return result.rows[0] || {};
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getCommentStats:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getTopActiveUsers(chatId, limit = 10) {
    try {
      const result = await pool.query(`
        SELECT 
          user_id,
          COUNT(*) as comment_count
        FROM comments 
        WHERE chat_id = $1::bigint
        GROUP BY user_id 
        ORDER BY comment_count DESC 
        LIMIT $2
      `, [chatId, limit]);
      
      return result.rows;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getTopActiveUsers:', error);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const commentsPG = new CommentsPG(); 