import { pool } from '../config.js';
import { cache } from '../utils/cache.js';

/**
 * –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ë–î
 * –í–∫–ª—é—á–∞–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

export class UsersPG {
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async upsertUser(ctx) {
    const u = ctx.from;
    try {
      const result = await pool.query(`
        INSERT INTO users (telegram_id, username, first_name, last_name)
        VALUES ($1, $2, $3, $4)
        ON CONFLICT (telegram_id) DO UPDATE
        SET username = EXCLUDED.username,
            first_name = EXCLUDED.first_name,
            last_name = EXCLUDED.last_name,
            updated_at = CURRENT_TIMESTAMP
        RETURNING *
      `, [u.id, u.username, u.first_name, u.last_name]);
      
      const user = result.rows[0];
      
      // –ö–µ—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      cache.setUser(u.id, user);
      
      return user;
    } catch (err) {
      console.error('[users][pg] –û—à–∏–±–∫–∞ upsertUser:', err);
      throw err;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
  async getUserByTelegramId(telegramId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
      const cached = cache.getUser(telegramId);
      if (cached) {
        return cached;
      }

      const result = await pool.query(
        'SELECT * FROM users WHERE telegram_id = $1::bigint',
        [telegramId]
      );
      
      const user = result.rows[0] || null;
      
      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (user) {
        cache.setUser(telegramId, user);
      }
      
      return user;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getUserByTelegramId:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  async getAllUsers(limit = 50, offset = 0) {
    try {
      const result = await pool.query(`
        SELECT * FROM users 
        ORDER BY created_at DESC 
        LIMIT $1 OFFSET $2
      `, [limit, offset]);
      
      return result.rows;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getAllUsers:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  async isAdmin(telegramId) {
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤:', telegramId);
    
    try {
      const user = await this.getUserByTelegramId(telegramId);
      
      if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ ADMIN_USER_ID');
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const adminUserId = process.env.ADMIN_USER_ID;
        const isOwner = adminUserId && telegramId.toString() === adminUserId;
        return isOwner;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ is_admin –≤ –ë–î
      if (user.is_admin) {
        console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω:', telegramId);
        return true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_USER_ID
      const adminUserId = process.env.ADMIN_USER_ID;
      const isOwner = adminUserId && telegramId.toString() === adminUserId;
      
      if (isOwner) {
        console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–µ—à—ë–Ω (env):', telegramId);
        return true;
      }
      
      console.log('‚ùå –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω:', telegramId);
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ isAdmin:', error);
      console.log('üîç Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ ADMIN_USER_ID –ø—Ä–∏ –æ—à–∏–±–∫–µ –ë–î');
      // Fallback: –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const adminUserId = process.env.ADMIN_USER_ID;
      return adminUserId && telegramId.toString() === adminUserId;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getUsersStats() {
    try {
      const result = await pool.query(`
        SELECT 
          COUNT(*) as total_users,
          COUNT(CASE WHEN created_at >= CURRENT_DATE THEN 1 END) as today_users,
          COUNT(CASE WHEN created_at >= CURRENT_DATE - INTERVAL '7 days' THEN 1 END) as week_users,
          COUNT(CASE WHEN created_at >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END) as month_users
        FROM users
      `);
      return result.rows[0];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getUsersStats:', error);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const usersPG = new UsersPG();