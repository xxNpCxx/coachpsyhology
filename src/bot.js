import { Telegraf, session, Scenes } from "telegraf";
import express from "express";

// 1. –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import { BOT_TOKEN, WEBHOOK_URL, pool } from "./config.js";

// 2. –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–∞–Ω–¥
import { registerStartCommand } from "./commands/start.js";

// 3. –ò–º–ø–æ—Ä—Ç—ã —Å—Ü–µ–Ω
import { testScene } from "./scenes/test.scene.js";
import { commentScene } from "./scenes/comment.scene.js";

// 4. –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
import { registerGlobalHandlers } from "./handlers/globalHandlers.js";
import { CommentTracker } from "./handlers/commentTracker.js";

// 5. –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç
import { cache } from "./utils/cache.js";

// 6. –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏  
import { AdminPanelHandler } from "./handlers/admin/adminPanel.js";

// 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(BOT_TOKEN);

// 8. –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–û–†–Ø–î–û–ö MIDDLEWARE:

// Session middleware –ü–ï–†–í–´–ú
bot.use(session({ defaultSession: () => ({}) }));

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.use(async (ctx, next) => {
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  if (ctx.message) {
    console.log(`üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.from.first_name} (${ctx.from.id}): ${ctx.message.text || '[–º–µ–¥–∏–∞]'}`);
  } else if (ctx.callbackQuery) {
    console.log(`üîò Callback –æ—Ç ${ctx.from.first_name} (${ctx.from.id}): ${ctx.callbackQuery.data}`);
  }
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–µ, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞–º
  if (ctx.scene && ctx.scene.current) {
    return next();
  }
  
  await next();
});

// Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –≥—Ä—É–ø–ø–µ
new CommentTracker(bot);

// FSM Stage middleware –¥–ª—è —Å—Ü–µ–Ω
const stage = new Scenes.Stage([testScene, commentScene]);
bot.use(stage.middleware());

// 9. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
function getUserState(userId) {
  return cache.getUserState(userId);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
new AdminPanelHandler(bot, getUserState);

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
registerStartCommand(bot);

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
registerGlobalHandlers(bot);

// 10. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback queries (–ü–û–°–õ–ï–î–ù–ò–ú!)
bot.action(/.*/, async (ctx) => {
  console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query:', ctx.callbackQuery?.data);
  await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
});

// 11. Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook + health check
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// Health check endpoint
app.get('/', (req, res) => {
  res.json({ 
    status: 'ok', 
    uptime: process.uptime(),
    timestamp: new Date().toISOString(),
    cache_stats: cache.getStats()
  });
});

// Webhook endpoint
app.post(`/webhook`, (req, res) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å');
  bot.handleUpdate(req.body, res);
});

// Health check –¥–ª—è Render
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
});

// 12. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    await pool.query('SELECT 1');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞');
    
    if (process.env.NODE_ENV === 'production') {
      // Production: webhook mode
      if (WEBHOOK_URL) {
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
        await bot.telegram.deleteWebhook();
        console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
        await bot.telegram.setWebhook(`${WEBHOOK_URL}`);
        console.log('üåê –ù–æ–≤—ã–π webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', `${WEBHOOK_URL}`);
      }
      
      app.listen(PORT, '0.0.0.0', () => {
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞:`, cache.getStats());
      });
    } else {
      // Development: polling mode
      await bot.telegram.deleteWebhook();
      console.log('üîÑ Webhook —É–¥–∞–ª–µ–Ω, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ polling');
      
      bot.launch();
      console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞:`, cache.getStats());
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// 13. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  if (ctx && ctx.reply) {
    ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('üëã –ü–æ–ª—É—á–µ–Ω SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  try {
    bot.stop('SIGINT');
  } catch {
    console.log('‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
  }
});

process.once('SIGTERM', () => {
  console.log('üëã –ü–æ–ª—É—á–µ–Ω SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  try {
    bot.stop('SIGTERM');
  } catch {
    console.log('‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω');
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();

export default bot;