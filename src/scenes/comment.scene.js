import { Scenes } from 'telegraf';
import { commentsPG } from '../pg/comments.pg.js';
import { COMMENT_GROUP_ID } from '../config.js';

export const commentScene = new Scenes.BaseScene('comment');

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É
commentScene.enter(async (ctx) => {
  const userId = ctx.from.id;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const accessCheck = await commentsPG.canUserTakeTest(userId, COMMENT_GROUP_ID);
    
    let message = 'üìù *–°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤*\n\n';
    
    if (accessCheck.canTake) {
      message += '‚úÖ *–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç!*\n\n';
      message += `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
      message += `‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${accessCheck.testCount}\n`;
      message += `‚Ä¢ –û—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${accessCheck.commentCount}\n\n`;
      message += 'üí° –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø–æ–º–æ–≥–∞—é—Ç —Å–æ–∑–¥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ —É–ª—É—á—à–∏—Ç—å —Ç–µ—Å—Ç –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.';
    } else {
      message += '‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤*\n\n';
      message += `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
      message += `‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${accessCheck.testCount}\n`;
      message += `‚Ä¢ –û—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${accessCheck.commentCount}\n`;
      message += `‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${accessCheck.requiredComments}\n\n`;
      message += `üí¨ –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â–µ ${accessCheck.requiredComments - accessCheck.commentCount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –≥—Ä—É–ø–ø–µ.\n\n`;
      message += 'üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö!';
    }
    
    const keyboard = [];
    if (accessCheck.canTake) {
      keyboard.push(['üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç']);
    }
    keyboard.push(['üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤']);
    keyboard.push(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']);
    
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        keyboard: keyboard,
        resize_keyboard: true
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      reply_markup: {
        keyboard: [
          ['üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'],
          ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ],
        resize_keyboard: true
      }
    });
  }
  
  await ctx.scene.leave();
});

// –í—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
commentScene.leave((_ctx) => {
  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
}); 