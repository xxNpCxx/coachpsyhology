import { commentsPG } from '../pg/comments.pg.js';
import { COMMENT_GROUP_ID, COMMENT_GROUP_LINK } from '../config.js';
import { cache } from '../utils/cache.js';



/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
 */

export function registerGlobalHandlers(bot) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"
  bot.hears(['üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'], async (ctx) => {
    console.log('üîç [–¢–ï–°–¢] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç" –≤—ã–∑–≤–∞–Ω');
    const userId = ctx.from.id;
    console.log(`üîç [–¢–ï–°–¢] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Ç–µ—Å—Ç–µ
    const userState = cache.getUserState(userId);
    if (userState && userState.currentQuestionIndex > 0) {
      await ctx.reply('‚ùì –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?', {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'restart_test' },
              { text: '‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π', callback_data: 'continue_test' }
            ]
          ]
        }
      });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–µ—Å—Ç—É
    try {
      const accessCheck = await commentsPG.canUserTakeTest(userId, COMMENT_GROUP_ID);
      
      if (!accessCheck.canTake) {
        const message = `‚ùå *–î–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω*\n\n` +
          `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
          `‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${accessCheck.testCount}\n` +
          `‚Ä¢ –û—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${accessCheck.commentCount}\n` +
          `‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${accessCheck.requiredComments}\n\n` +
          `üí¨ –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ –º–µ–Ω–µ–µ ${accessCheck.requiredComments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –≥—Ä—É–ø–ø–µ.\n\n` +
          `üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö!`;
        
        await ctx.reply(message, { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', callback_data: 'check_comments' }],
              [{ text: 'üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', url: COMMENT_GROUP_LINK || 'https://t.me/your_group' }]
            ]
          }
        });
        return;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
    }
    
    await ctx.scene.enter('test');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û —Ç–µ—Å—Ç–µ"
  bot.hears(['‚ÑπÔ∏è –û —Ç–µ—Å—Ç–µ', '–û —Ç–µ—Å—Ç–µ'], async (ctx) => {
    const aboutMessage = `
üìñ *–û —Ç–µ—Å—Ç–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤*

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ–æ—Ä–∏–∏ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –ö–∞—Ä–ª–∞ –Æ–Ω–≥–∞ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö.

üéØ *12 –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏:*
1. üê£ **–î–∏—Ç—è** ‚Äî –î–æ–≤–µ—Ä–∏–µ, –ú–µ—á—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
2. üßë‚Äçü§ù‚Äçüßë **–°–ª–∞–≤–Ω—ã–π –º–∞–ª—ã–π** ‚Äî –î—Ä—É–∂–±–∞, –†–∞–≤–µ–Ω—Å—Ç–≤–æ  
3. üõ° **–û–ø–µ–∫—É–Ω** ‚Äî –ó–∞–±–æ—Ç–∞, –°–µ–º—å—è
4. üß≠ **–ò—Å–∫–∞—Ç–µ–ª—å** ‚Äî –ù–æ–≤–∏–∑–Ω–∞, –ê–≤–∞–Ω—Ç—é—Ä–∏–∑–º
5. üî• **–ë—É–Ω—Ç–∞—Ä—å** ‚Äî –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è, –ë–æ—Ä—å–±–∞ –∑–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å
6. ‚öîÔ∏è **–í–æ–∏–Ω** ‚Äî –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –õ–∏–¥–µ—Ä—Å—Ç–≤–æ
7. üíò **–õ—é–±–æ–≤–Ω–∏–∫** ‚Äî –õ—é–±–æ–≤—å, –≠—Å—Ç–µ—Ç–∏–∫–∞
8. üé® **–¢–≤–æ—Ä–µ—Ü** ‚Äî –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
9. üé≠ **–®—É—Ç** ‚Äî –Æ–º–æ—Ä, –•–∞—Ä–∏–∑–º–∞
10. üìö **–ú—É–¥—Ä–µ—Ü** ‚Äî –ù–∞—É–∫–∞, –û–ø—ã—Ç
11. üßô‚Äç‚ôÇÔ∏è **–ú–∞–≥** ‚Äî –¢–∞–π–Ω–∞, –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
12. üëë **–ü—Ä–∞–≤–∏—Ç–µ–ª—å** ‚Äî –í–ª–∞—Å—Ç—å, –ü–æ—Ä—è–¥–æ–∫

üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–π
‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å–ª–∞–±—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –¥—Ä—É–≥–∏–º–∏`;

    await ctx.reply(aboutMessage, { parse_mode: 'Markdown' });
  });



  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
  bot.action('start_test', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('test');
  });

  bot.action('restart_test', async (ctx) => {
    await ctx.answerCbQuery();
    cache.deleteUserState(ctx.from.id);
    await ctx.scene.enter('test');
  });

  bot.action('continue_test', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç...');
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  bot.action('leave_comment', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('comment');
  });

  bot.action('cancel_comment', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
      reply_markup: {
        keyboard: [
          ['üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'],
          ['‚ÑπÔ∏è –û —Ç–µ—Å—Ç–µ']
        ],
        resize_keyboard: true
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  bot.action('check_comments', async (ctx) => {
    await ctx.answerCbQuery();
    const userId = ctx.from.id;
    
    try {
      const accessCheck = await commentsPG.canUserTakeTest(userId, COMMENT_GROUP_ID);
      const commentInfo = await commentsPG.getUserRecentComments(userId, COMMENT_GROUP_ID, 3);
      
      let message = `üìä *–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤*\n\n`;
      message += `‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${accessCheck.testCount}\n`;
      message += `‚Ä¢ –û—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${accessCheck.commentCount}\n`;
      message += `‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${accessCheck.requiredComments}\n\n`;
      
      if (accessCheck.canTake) {
        message += `‚úÖ *–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç!*\n\n`;
      } else {
        message += `‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤*\n\n`;
        message += `üí¨ –û—Å—Ç–∞–≤—å—Ç–µ –µ—â–µ ${accessCheck.requiredComments - accessCheck.commentCount} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –≥—Ä—É–ø–ø–µ.\n\n`;
      }
      
      if (commentInfo.length > 0) {
        message += `üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:*\n`;
        commentInfo.forEach((comment, index) => {
          const date = new Date(comment.created_at).toLocaleDateString('ru-RU');
          const preview = comment.text.length > 50 ? comment.text.substring(0, 50) + '...' : comment.text;
          message += `${index + 1}. ${date}: ${preview}\n`;
        });
      }
      
      const keyboard = [];
      if (accessCheck.canTake) {
        keyboard.push([{ text: 'üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', callback_data: 'start_test' }]);
      }
      keyboard.push([{ text: 'üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', url: COMMENT_GROUP_LINK || 'https://t.me/your_group' }]);
      
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  bot.action('main_menu', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', {
      parse_mode: 'Markdown',
      reply_markup: {
        keyboard: [
          ['üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'],
          ['‚ÑπÔ∏è –û —Ç–µ—Å—Ç–µ']
        ],
        resize_keyboard: true
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
  bot.hears(['üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'], async (ctx) => {
    const groupLink = COMMENT_GROUP_LINK || 'https://t.me/your_group';
    await ctx.reply(
      `üí¨ *–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*\n\n` +
      `–î–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É:\n\n` +
      `üîó ${groupLink}\n\n` +
      `–ü–æ—Å–ª–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –≥—Ä—É–ø–ø–µ, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É', url: groupLink }],
            [{ text: 'üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', callback_data: 'check_comments' }]
          ]
        }
      }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  bot.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '/menu'], async (ctx) => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if (ctx.scene && ctx.scene.current) {
      await ctx.scene.leave();
    }
    
    await ctx.reply('üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', {
      parse_mode: 'Markdown',
      reply_markup: {
        keyboard: [
          ['üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'],
          ['‚ÑπÔ∏è –û —Ç–µ—Å—Ç–µ']
        ],
        resize_keyboard: true
      }
    });
  });
}