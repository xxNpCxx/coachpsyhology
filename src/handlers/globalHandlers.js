import { testsPG } from '../pg/tests.pg.js';
import { cache } from '../utils/cache.js';
import { hasApprovedComment } from '../pg/comments.pg.js';



/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
 */

export function registerGlobalHandlers(bot) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"
  bot.hears(['üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'], async (ctx) => {
    const userId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Ç–µ—Å—Ç–µ
    const userState = cache.getUserState(userId);
    if (userState && userState.currentQuestionIndex > 0) {
      await ctx.reply('‚ùì –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç. –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?', {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'restart_test' },
              { text: '‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π', callback_data: 'continue_test' }
            ]
          ]
        }
      });
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    try {
      const results = await testsPG.getLatestTestResults(userId);
      
      if (results.length > 0) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        const hasComment = await hasApprovedComment(userId);
        
        if (!hasComment) {
          await ctx.reply(
            'üìù *–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞*\n\n' +
            '–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç. –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ.\n\n' +
            '–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å —Ç–µ—Å—Ç –∏ —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.',
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'leave_comment' }],
                  [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_comment' }]
                ]
              }
            }
          );
          return;
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
    }
    
    await ctx.scene.enter('test');
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û —Ç–µ—Å—Ç–µ"
  bot.hears(['‚ÑπÔ∏è –û —Ç–µ—Å—Ç–µ', '–û —Ç–µ—Å—Ç–µ'], async (ctx) => {
    const aboutMessage = `
üìñ *–û —Ç–µ—Å—Ç–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤*

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ–æ—Ä–∏–∏ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –ö–∞—Ä–ª–∞ –Æ–Ω–≥–∞ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö.

üéØ *12 –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏:*
1. üê£ **–î–∏—Ç—è** ‚Äî –î–æ–≤–µ—Ä–∏–µ, –ú–µ—á—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
2. üßë‚Äçü§ù‚Äçüßë **–°–ª–∞–≤–Ω—ã–π –º–∞–ª—ã–π** ‚Äî –î—Ä—É–∂–±–∞, –†–∞–≤–µ–Ω—Å—Ç–≤–æ  
3. üõ° **–û–ø–µ–∫—É–Ω** ‚Äî –ó–∞–±–æ—Ç–∞, –°–µ–º—å—è
4. üß≠ **–ò—Å–∫–∞—Ç–µ–ª—å** ‚Äî –ù–æ–≤–∏–∑–Ω–∞, –ê–≤–∞–Ω—Ç—é—Ä–∏–∑–º
5. üî• **–ë—É–Ω—Ç–∞—Ä—å** ‚Äî –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è, –ë–æ—Ä—å–±–∞ –∑–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å
6. ‚öîÔ∏è **–í–æ–∏–Ω** ‚Äî –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –õ–∏–¥–µ—Ä—Å—Ç–≤–æ
7. üíò **–õ—é–±–æ–≤–Ω–∏–∫** ‚Äî –õ—é–±–æ–≤—å, –≠—Å—Ç–µ—Ç–∏–∫–∞
8. üé® **–¢–≤–æ—Ä–µ—Ü** ‚Äî –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
9. üé≠ **–®—É—Ç** ‚Äî –Æ–º–æ—Ä, –•–∞—Ä–∏–∑–º–∞
10. üìö **–ú—É–¥—Ä–µ—Ü** ‚Äî –ù–∞—É–∫–∞, –û–ø—ã—Ç
11. üßô‚Äç‚ôÇÔ∏è **–ú–∞–≥** ‚Äî –¢–∞–π–Ω–∞, –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
12. üëë **–ü—Ä–∞–≤–∏—Ç–µ–ª—å** ‚Äî –í–ª–∞—Å—Ç—å, –ü–æ—Ä—è–¥–æ–∫

üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –º–æ—Ç–∏–≤–∞—Ü–∏–π
‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å–ª–∞–±—ã–º–∏ –º–µ—Å—Ç–∞–º–∏
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –¥—Ä—É–≥–∏–º–∏`;

    await ctx.reply(aboutMessage, { parse_mode: 'Markdown' });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
  bot.hears(['üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', '–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'], async (ctx) => {
    const userId = ctx.from.id;
    
    try {
      const results = await testsPG.getLatestTestResults(userId);
      
      if (results.length === 0) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –∞—Ä—Ö–µ—Ç–∏–ø—ã!', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', callback_data: 'start_test' }]
            ]
          }
        });
        return;
      }

      let message = `üìä *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n\n`;
      
      results.forEach((result, index) => {
        const emoji = ['ü•á', 'ü•à', 'ü•â', 'üèÖ'][index] || `${index + 1}.`;
        message += `${emoji} **${result.archetype_name}**: ${result.percentage}%\n`;
      });

      message += `\nüìÖ –î–∞—Ç–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ${new Date(results[0].created_at).toLocaleDateString('ru-RU')}`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
      let hasComment = false;
      try {
        hasComment = await hasApprovedComment(userId);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
      }

      const keyboard = [];
      if (hasComment) {
        keyboard.push([{ text: 'üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ', callback_data: 'start_test' }]);
      } else {
        keyboard.push([{ text: 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è', callback_data: 'leave_comment' }]);
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
  bot.action('start_test', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('test');
  });

  bot.action('restart_test', async (ctx) => {
    await ctx.answerCbQuery();
    cache.deleteUserState(ctx.from.id);
    await ctx.scene.enter('test');
  });

  bot.action('continue_test', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç...');
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  bot.action('leave_comment', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('comment');
  });

  bot.action('cancel_comment', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.reply('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', {
      reply_markup: {
        keyboard: [
          ['üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'],
          ['‚ÑπÔ∏è –û —Ç–µ—Å—Ç–µ', 'üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã']
        ],
        resize_keyboard: true
      }
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  bot.hears(['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '/menu'], async (ctx) => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if (ctx.scene && ctx.scene.current) {
      await ctx.scene.leave();
    }
    
    await ctx.reply('üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', {
      parse_mode: 'Markdown',
      reply_markup: {
        keyboard: [
          ['üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'],
          ['‚ÑπÔ∏è –û —Ç–µ—Å—Ç–µ', 'üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã']
        ],
        resize_keyboard: true
      }
    });
  });
}