import { commentsPG } from '../pg/comments.pg.js';
import { COMMENT_GROUP_ID } from '../config.js';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É
 */

export class CommentTracker {
  constructor(bot) {
    this.bot = bot;
    this.setupHandlers();
  }

  setupHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
    this.bot.on('message', async (ctx) => {
      console.log(`üîç [–ö–û–ú–ú–ï–ù–¢–´] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${ctx.message?.from?.first_name} (${ctx.message?.from?.id}) –≤ —á–∞—Ç–µ ${ctx.message?.chat?.id}`);
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
        if (ctx.message.chat.id.toString() !== COMMENT_GROUP_ID) {
          console.log(`üîç [–ö–û–ú–ú–ï–ù–¢–´] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã ${COMMENT_GROUP_ID}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          return;
        }

        console.log(`üîç [–ö–û–ú–ú–ï–ù–¢–´] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã ${COMMENT_GROUP_ID}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞)
        if (ctx.message.text && !ctx.message.text.startsWith('/')) {
          await this.handleNewComment(ctx);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('edited_message', async (ctx) => {
      try {
        if (ctx.editedMessage.chat.id.toString() !== COMMENT_GROUP_ID) {
          return;
        }

        if (ctx.editedMessage.text && !ctx.editedMessage.text.startsWith('/')) {
          await this.handleEditedComment(ctx);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });
  }

  async handleNewComment(ctx) {
    try {
      const message = ctx.message;
      const userId = message.from.id;
      const messageId = message.message_id;
      const chatId = message.chat.id;
      const text = message.text;
      const timestamp = new Date(message.date * 1000); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Unix timestamp

      console.log(`üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç ${message.from.first_name} (${userId}) –≤ –≥—Ä—É–ø–ø–µ ${chatId}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await commentsPG.saveComment(userId, messageId, chatId, text, timestamp);

      console.log(`‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${text.substring(0, 50)}...`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    }
  }

  async handleEditedComment(ctx) {
    try {
      const message = ctx.editedMessage;
      const userId = message.from.id;
      const messageId = message.message_id;
      const chatId = message.chat.id;
      const text = message.text;
      const timestamp = new Date(message.edit_date * 1000);

      console.log(`‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç ${message.from.first_name} (${userId})`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await commentsPG.saveComment(userId, messageId, chatId, text, timestamp);

      console.log(`‚úÖ –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω: ${text.substring(0, 50)}...`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Ç–µ—Å—Ç—É
  async checkUserAccess(userId) {
    try {
      if (!COMMENT_GROUP_ID) {
        console.warn('‚ö†Ô∏è COMMENT_GROUP_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
        return { canTake: true, commentCount: 0, testCount: 0, requiredComments: 0 };
      }

      const result = await commentsPG.canUserTakeTest(userId, COMMENT_GROUP_ID);
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è ${userId}:`, result);
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
      return { canTake: true, commentCount: 0, testCount: 0, requiredComments: 0 };
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserCommentInfo(userId) {
    try {
      if (!COMMENT_GROUP_ID) {
        return { commentCount: 0, recentComments: [] };
      }

      const [commentCount, recentComments] = await Promise.all([
        commentsPG.getUserCommentCount(userId, COMMENT_GROUP_ID),
        commentsPG.getUserRecentComments(userId, COMMENT_GROUP_ID, 3)
      ]);

      return { commentCount, recentComments };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö:', error);
      return { commentCount: 0, recentComments: [] };
    }
  }
} 