// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
// –°—Ç–∞—Ä–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã

import { usersPG } from '../../pg/users.pg.js';
import { testsPG } from '../../pg/tests.pg.js';
import { getPendingComments, approveComment, rejectComment } from '../../pg/comments.pg.js';

class AdminPanelHandler {
  constructor(bot, getUserState) {
    this.bot = bot;
    this.getUserState = getUserState;
    this.setupHandlers();
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    this.bot.command('admin', this.handleAdminCommand.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    this.bot.action('admin_users_list', this.handleUsersList.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    this.bot.action('admin_comments', this.handleCommentsList.bind(this));
    this.bot.action(/approve_comment_(\d+)/, this.handleApproveComment.bind(this));
    this.bot.action(/reject_comment_(\d+)/, this.handleRejectComment.bind(this));
    this.bot.action('admin_back', this.handleAdminCommand.bind(this));
  }

  async handleAdminCommand(ctx) {
    const isAdmin = await usersPG.isAdmin(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }

    await ctx.reply(
      'üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'admin_users_list' }],
            [{ text: 'üìù –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', callback_data: 'admin_comments' }]
          ]
        }
      }
    );
  }

  async handleUsersList(ctx) {
    const isAdmin = await usersPG.isAdmin(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      console.log('üîç [–ê–î–ú–ò–ù] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      const users = await usersPG.getAllUsers();
      console.log(`üìä [–ê–î–ú–ò–ù] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
      
      let message = `üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n`;
      
      if (users.length === 0) {
        message += '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      } else {
        for (let i = 0; i < Math.min(users.length, 10); i++) {
          const user = users[i];
          const name = user.first_name || user.username || `User${user.telegram_id}`;
          
          console.log(`üîç [–ê–î–ú–ò–ù] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${i + 1}: ${name} (ID: ${user.telegram_id})`);
          
          // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const testResults = await testsPG.getLatestTestResults(user.telegram_id);
          console.log(`üìä [–ê–î–ú–ò–ù] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ${name}: ${testResults ? testResults.length : 0} –∑–∞–ø–∏—Å–µ–π`);
          
          message += `${i + 1}. ${name}\n`;
          message += `   ID: \`${user.telegram_id}\`\n`;
          
          if (testResults && testResults.length > 0) {
            console.log(`üéØ [–ê–î–ú–ò–ù] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ${name}:`, testResults.map(r => `${r.archetype_name}: ${r.percentage}%`).join(', '));
            message += `   üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n`;
            testResults.slice(0, 4).forEach((result, idx) => {
              const position = ['ü•á', 'ü•à', 'ü•â', 'üèÖ'][idx] || `${idx + 1}.`;
              message += `      ${position} ${result.archetype_name}: ${result.percentage}%\n`;
            });
          } else {
            console.log(`‚ö†Ô∏è [–ê–î–ú–ò–ù] –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ${name}`);
              message += `   üìù *–°—Ç–∞—Ç—É—Å:* –¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç\n`;
          }
        message += '\n';
        }
      }
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  async handleCommentsList(ctx) {
    const isAdmin = await usersPG.isAdmin(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      console.log('üîç [–ê–î–ú–ò–ù] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
      const comments = await getPendingComments();
      console.log(`üìä [–ê–î–ú–ò–ù] –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${comments.length}`);
      
      let message = `üìù *–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤*\n\n`;
      
      if (comments.length === 0) {
        message += '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.';
      } else {
        for (let i = 0; i < Math.min(comments.length, 5); i++) {
          const comment = comments[i];
          const userName = comment.first_name || comment.username || `User${comment.user_id}`;
          const commentPreview = comment.comment_text.length > 100 
            ? comment.comment_text.substring(0, 100) + '...' 
            : comment.comment_text;
          
          message += `${i + 1}. *${userName}*\n`;
          message += `   ID: \`${comment.user_id}\`\n`;
          message += `   üìÖ ${new Date(comment.created_at).toLocaleDateString('ru-RU')}\n`;
          message += `   üí¨ ${commentPreview}\n\n`;
        }
      }
      
      const keyboard = [];
      if (comments.length > 0) {
        comments.slice(0, 5).forEach((comment, index) => {
          keyboard.push([
            { text: `‚úÖ –û–¥–æ–±—Ä–∏—Ç—å ${index + 1}`, callback_data: `approve_comment_${comment.id}` },
            { text: `‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å ${index + 1}`, callback_data: `reject_comment_${comment.id}` }
          ]);
        });
      }
      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]);
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  async handleApproveComment(ctx) {
    const isAdmin = await usersPG.isAdmin(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    const commentId = parseInt(ctx.match[1]);
    
    try {
      const comment = await approveComment(commentId, ctx.from.id);
      console.log(`‚úÖ [–ê–î–ú–ò–ù] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${commentId} –æ–¥–æ–±—Ä–µ–Ω`);
      
      await ctx.answerCbQuery('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–æ–±—Ä–µ–Ω');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
      try {
        await this.bot.telegram.sendMessage(comment.user_id, 
          '‚úÖ *–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–æ–±—Ä–µ–Ω!*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ.',
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      await this.handleCommentsList(ctx);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è');
    }
  }

  async handleRejectComment(ctx) {
    const isAdmin = await usersPG.isAdmin(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    const commentId = parseInt(ctx.match[1]);
    
    try {
      const comment = await rejectComment(commentId, ctx.from.id);
      console.log(`‚ùå [–ê–î–ú–ò–ù] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ${commentId} –æ—Ç–∫–ª–æ–Ω–µ–Ω`);
      
      await ctx.answerCbQuery('‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
      try {
        await this.bot.telegram.sendMessage(comment.user_id, 
          '‚ùå *–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤.',
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      await this.handleCommentsList(ctx);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
    }
  }
}

export { AdminPanelHandler };