// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
// –°—Ç–∞—Ä–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã

import { usersPG } from '../../pg/users.pg.js';
import { testsPG } from '../../pg/tests.pg.js';
import { commentsPG } from '../../pg/comments.pg.js';
import { COMMENT_GROUP_ID } from '../../config.js';

class AdminPanelHandler {
  constructor(bot, getUserState) {
    this.bot = bot;
    this.getUserState = getUserState;
    this.setupHandlers();
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    this.bot.command('admin', this.handleAdminCommand.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    this.bot.action('admin_users_list', this.handleUsersList.bind(this));
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    this.bot.action('admin_comments', this.handleCommentsList.bind(this));
    this.bot.action('admin_back', this.handleAdminCommand.bind(this));
  }

  async handleAdminCommand(ctx) {
    const isAdmin = await usersPG.isAdmin(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }

    await ctx.reply(
      'üîê *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'admin_users_list' }],
            [{ text: 'üìù –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', callback_data: 'admin_comments' }]
          ]
        }
      }
    );
  }

  async handleUsersList(ctx) {
    const isAdmin = await usersPG.isAdmin(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      console.log('üîç [–ê–î–ú–ò–ù] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      const users = await usersPG.getAllUsers();
      console.log(`üìä [–ê–î–ú–ò–ù] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
      
      let message = `üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n`;
      
      if (users.length === 0) {
        message += '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      } else {
        for (let i = 0; i < Math.min(users.length, 10); i++) {
          const user = users[i];
          const name = user.first_name || user.username || `User${user.telegram_id}`;
          
          console.log(`üîç [–ê–î–ú–ò–ù] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${i + 1}: ${name} (ID: ${user.telegram_id})`);
          
          // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const testResults = await testsPG.getLatestTestResults(user.telegram_id);
          console.log(`üìä [–ê–î–ú–ò–ù] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ${name}: ${testResults ? testResults.length : 0} –∑–∞–ø–∏—Å–µ–π`);
          
          message += `${i + 1}. ${name}\n`;
          message += `   ID: \`${user.telegram_id}\`\n`;
          
          if (testResults && testResults.length > 0) {
            console.log(`üéØ [–ê–î–ú–ò–ù] –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ${name}:`, testResults.map(r => `${r.archetype_name}: ${r.percentage}%`).join(', '));
            message += `   üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n`;
            testResults.slice(0, 4).forEach((result, idx) => {
              const position = ['ü•á', 'ü•à', 'ü•â', 'üèÖ'][idx] || `${idx + 1}.`;
              message += `      ${position} ${result.archetype_name}: ${result.percentage}%\n`;
            });
          } else {
            console.log(`‚ö†Ô∏è [–ê–î–ú–ò–ù] –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è ${name}`);
              message += `   üìù *–°—Ç–∞—Ç—É—Å:* –¢–µ—Å—Ç –Ω–µ –Ω–∞—á–∞—Ç\n`;
          }
        message += '\n';
        }
      }
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  async handleCommentsList(ctx) {
    const isAdmin = await usersPG.isAdmin(ctx.from.id);
    
    if (!isAdmin) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      console.log('üîç [–ê–î–ú–ò–ù] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...');
      const stats = await commentsPG.getCommentStats(COMMENT_GROUP_ID);
      console.log(`üìä [–ê–î–ú–ò–ù] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:`, stats);
      
      let message = `üìù *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤*\n\n`;
      
      if (!stats.total_comments) {
        message += '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      } else {
        message += `üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
        message += `‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${stats.total_comments}\n`;
        message += `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.unique_users}\n`;
        message += `‚Ä¢ –ü–µ—Ä–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${stats.first_comment ? new Date(stats.first_comment).toLocaleDateString('ru-RU') : '–ù/–î'}\n`;
        message += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${stats.last_comment ? new Date(stats.last_comment).toLocaleDateString('ru-RU') : '–ù/–î'}\n\n`;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const topUsers = await commentsPG.getTopActiveUsers(COMMENT_GROUP_ID, 5);
        if (topUsers.length > 0) {
          message += `üèÜ *–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n`;
          topUsers.forEach((user, index) => {
            const emoji = ['ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üéñÔ∏è'][index] || `${index + 1}.`;
            message += `${emoji} ID: \`${user.user_id}\` - ${user.comment_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n`;
          });
        }
      }
      
      const keyboard = [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_back' }]
      ];
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
  }


}

export { AdminPanelHandler };