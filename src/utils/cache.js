/**
 * –°–∏—Å—Ç–µ–º–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ë–î –∏ —É–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
 */

class Cache {
  constructor() {
    // –ö–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: userId -> userData
    this.users = new Map();
    
    // –ö–µ—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤: userId -> testResults
    this.testResults = new Map();
    
    // –ö–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: userId -> userState
    this.userStates = new Map();
    
    // TTL –¥–ª—è –∫–µ—à–∞ (30 –º–∏–Ω—É—Ç)
    this.TTL = 30 * 60 * 1000;
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => this.cleanup(), 5 * 60 * 1000);
  }

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  setUser(userId, userData) {
    this.users.set(userId, {
      data: userData,
      timestamp: Date.now()
    });
  }

  getUser(userId) {
    const cached = this.users.get(userId);
    if (cached && (Date.now() - cached.timestamp < this.TTL)) {
      return cached.data;
    }
    return null;
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
  setTestResults(userId, results) {
    this.testResults.set(userId, {
      data: results,
      timestamp: Date.now()
    });
  }

  getTestResults(userId) {
    const cached = this.testResults.get(userId);
    if (cached && (Date.now() - cached.timestamp < this.TTL)) {
      return cached.data;
    }
    return null;
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  setUserState(userId, state) {
    this.userStates.set(userId, state);
  }

  getUserState(userId) {
    return this.userStates.get(userId) || null;
  }

  deleteUserState(userId) {
    this.userStates.delete(userId);
  }

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –∫–µ—à–∞
  cleanup() {
    const now = Date.now();
    
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const [userId, cached] of this.users.entries()) {
      if (now - cached.timestamp > this.TTL) {
        this.users.delete(userId);
      }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    for (const [userId, cached] of this.testResults.entries()) {
      if (now - cached.timestamp > this.TTL) {
        this.testResults.delete(userId);
      }
    }
    
    console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${this.users.size}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${this.testResults.size}, —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${this.userStates.size}`);
  }

  // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  invalidateUser(userId) {
    this.users.delete(userId);
    this.testResults.delete(userId);
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
  getStats() {
    return {
      users: this.users.size,
      testResults: this.testResults.size,
      userStates: this.userStates.size
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const cache = new Cache();
export default cache;