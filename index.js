require('dotenv').config();
const { Telegraf } = require('telegraf');
const fs = require('fs');
const path = require('path');
const http = require('http');
const { logEvent } = require('./logger');
const { trackEvent, setUserOnce } = require('./analytics');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
const archetypesData = JSON.parse(fs.readFileSync('./questions.json', 'utf8'));

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É –æ—Ç 1 –¥–æ 84
// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
const allQuestions = [];
const archetypeNames = Object.keys(archetypesData);

for (const archetype of archetypeNames) {
  for (const imageName of archetypesData[archetype]) {
    allQuestions.push({
      text: imageName,
      archetype: archetype
    });
  }
}

// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤ text –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const questions = allQuestions.sort((a, b) => {
  const numA = parseInt(a.text);
  const numB = parseInt(b.text);
  return numA - numB;
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
const userStates = new Map();

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState {
  constructor() {
    this.currentQuestionIndex = 0;
    this.answers = [];
    this.archetypeScores = new Map();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
function initializeArchetypeScores() {
  const scores = new Map();
  Object.keys(archetypesData).forEach(archetype => {
    scores.set(archetype, 0);
  });
  return scores;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function getImagePath(imageName) {
  const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];

  for (const ext of imageExtensions) {
    const imagePath = path.join(__dirname, 'questions', imageName + ext);
    if (fs.existsSync(imagePath)) {
      return imagePath;
    }
  }

  return null; // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ PDF —Ñ–∞–π–ª—É –∞—Ä—Ö–µ—Ç–∏–ø–∞
function getArchetypePdfPath(archetypeName) {
  const pdfPath = path.join(__dirname, 'answers', archetypeName.toLowerCase() + '.pdf');
  if (fs.existsSync(pdfPath)) {
    return pdfPath;
  }
  return null; // PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
}

// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook –∏ health check
const server = http.createServer(async (req, res) => {
  res.setHeader('Content-Type', 'application/json');
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  // Webhook endpoint –¥–ª—è Telegram
  if (req.url === '/webhook' && req.method === 'POST') {
    let body = '';
    req.on('data', chunk => {
      body += chunk.toString();
    });

    req.on('end', async () => {
      try {
        const update = JSON.parse(body);
        await bot.handleUpdate(update);
        res.writeHead(200);
        res.end('OK');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.writeHead(500);
        res.end('Error');
      }
    });
    return;
  }

  // Health check endpoints
  if (req.url === '/health' || req.url === '/') {
    const healthData = {
      status: 'ok',
      timestamp: new Date().toISOString(),
      bot: {
        name: 'Archetype Test Bot',
        version: '1.0.0',
        uptime: process.uptime(),
        users: userStates.size,
        questions: questions.length,
        archetypes: Object.keys(archetypesData).length,
        webhook: true
      },
      system: {
        memory: process.memoryUsage(),
        platform: process.platform,
        nodeVersion: process.version
      }
    };

    res.writeHead(200);
    res.end(JSON.stringify(healthData, null, 2));
  } else if (req.url === '/status') {
    const statusData = {
      status: 'running',
      uptime: process.uptime(),
      activeUsers: userStates.size,
      totalQuestions: questions.length,
      archetypes: Object.keys(archetypesData),
      webhook: true
    };

    res.writeHead(200);
    res.end(JSON.stringify(statusData, null, 2));
  } else if (req.url === '/set-webhook') {
    // Endpoint –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
    try {
      const webhookUrl = process.env.WEBHOOK_URL;
      await bot.telegram.setWebhook(webhookUrl);
      res.writeHead(200);
      res.end(JSON.stringify({
        success: true,
        webhookUrl: webhookUrl,
        message: 'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
      res.writeHead(500);
      res.end(JSON.stringify({
        success: false,
        error: error.message
      }));
    }
  } else {
    res.writeHead(404);
    res.end(JSON.stringify({ error: 'Not Found' }));
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
async function checkSubscription(userId) {
  const channelId = process.env.REQUIRED_CHANNEL_ID;
  if (!channelId) return true; // –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
  try {
    const member = await bot.telegram.getChatMember(channelId, userId);
    // –°—Ç–∞—Ç—É—Å—ã, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
    const allowed = ['member', 'administrator', 'creator'];
    return allowed.includes(member.status);
  } catch (e) {
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    return false;
  }
}

function getChannelLink() {
  const link = process.env.REQUIRED_CHANNEL_LINK;
  if (!link) return undefined;
  if (link.startsWith('@')) {
    return `https://t.me/${link.slice(1)}`;
  }
  return link;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
function getSubscriptionKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: getChannelLink() }
      ],
      [
        { text: '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data: 'check_subscription' }
      ]
    ]
  };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  const userId = ctx.from.id;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    await ctx.reply('–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è".', {
      reply_markup: getSubscriptionKeyboard()
    });
    return;
  }
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Mixpanel (people.set_once)
  setUserOnce(userId, {
    username: ctx.from.username,
    first_name: ctx.from.first_name + ' ' + ctx.from.last_name,
    language_code: ctx.from.language_code,
  });
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Mixpanel
  trackEvent(userId, 'start_command', {});
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç —Ä–∞–Ω–µ–µ
  const hasState = userStates.has(userId);
  const buttonText = hasState ? 'üîÑ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞' : '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç';
  const callbackData = hasState ? 'restart_test' : 'start_test';
  await ctx.reply(`–ù–∞ –∫–∞–∂–¥–æ–º —Å–ª–∞–π–¥–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤—ã–±—Ä–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥–æ–µ –∏–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç.
–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å —á–µ—Å—Ç–Ω–æ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.`, {
    reply_markup: {
      inline_keyboard: [[{ text: buttonText, callback_data: callbackData }]]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç" –∏–ª–∏ "–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞"
bot.action(['start_test', 'restart_test'], async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    await ctx.reply('–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è".', {
      reply_markup: getSubscriptionKeyboard()
    });
    return;
  }
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Mixpanel
  trackEvent(userId, 'test_started', {});
  userStates.set(userId, {
    currentQuestionIndex: 0,
    answers: [],
    archetypeScores: initializeArchetypeScores()
  });
  await sendQuestion(ctx, userId);
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendQuestion(ctx, userId) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    await ctx.reply('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è".', {
      reply_markup: getSubscriptionKeyboard()
    });
    return;
  }
  const userState = userStates.get(userId);

  if (userState.currentQuestionIndex >= questions.length) {
    // –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    showResults(ctx, userId);
    return;
  }

  const question = questions[userState.currentQuestionIndex];
  const questionNumber = userState.currentQuestionIndex + 1;
  const totalQuestions = questions.length;

  // –≠–º–æ–¥–∑–∏ —à–∫–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const progressBarLength = 10;
  const filled = Math.round((questionNumber) / totalQuestions * progressBarLength);
  const progressBar = 'üü©'.repeat(filled) + '‚¨ú'.repeat(progressBarLength - filled);

  // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞
  const imagePath = getImagePath(question.text);

  const keyboard = {
    inline_keyboard: [
      [
        { text: '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)', callback_data: 'answer_0' }
      ],
      [
        { text: '–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç', callback_data: 'answer_1' }
      ],
      [
        { text: '–ù–µ –∑–Ω–∞—é', callback_data: 'answer_2' }
      ],
      [
        { text: '–≠—Ç–æ —Å–æ–≤—Å–µ–º –Ω–µ –ø—Ä–æ –º–µ–Ω—è', callback_data: 'answer_3' }
      ]
    ]
  };

  try {
    if (imagePath) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
      const caption = `–í–æ–ø—Ä–æ—Å ${questionNumber} –∏–∑ ${totalQuestions}\n${progressBar}`;
      await ctx.replyWithPhoto(
        { source: imagePath },
        {
          caption: caption,
          reply_markup: keyboard
        }
      );
    } else {
      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = `–í–æ–ø—Ä–æ—Å ${questionNumber} –∏–∑ ${totalQuestions}:\n${progressBar}\n\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "${question.text}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–ø–∫–µ questions/`;
      await ctx.reply(message, { reply_markup: keyboard });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    // Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `–í–æ–ø—Ä–æ—Å ${questionNumber} –∏–∑ ${totalQuestions}:\n${progressBar}\n\n${question.text}`;
    await ctx.reply(message, { reply_markup: keyboard });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action(/answer_(\d)/, async (ctx) => {
  const userId = ctx.from.id;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    await ctx.reply('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è".', {
      reply_markup: getSubscriptionKeyboard()
    });
    return;
  }
  const answer = parseInt(ctx.match[1]);

  // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.log('Callback query —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª:', error.message);
    return;
  }

  if (!userStates.has(userId)) {
    ctx.reply('–ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start');
    return;
  }

  const userState = userStates.get(userId);
  const currentQuestion = questions[userState.currentQuestionIndex];

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
  userState.answers.push({
    questionIndex: userState.currentQuestionIndex,
    answer: answer,
    archetype: currentQuestion.archetype
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∫ –∞—Ä—Ö–µ—Ç–∏–ø—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  // 0 = "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω" = 3 –±–∞–ª–ª–∞
  // 1 = "–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç" = 2 –±–∞–ª–ª–∞  
  // 2 = "–ù–µ –∑–Ω–∞—é" = 1 –±–∞–ª–ª
  // 3 = "–≠—Ç–æ —Å–æ–≤—Å–µ–º –Ω–µ –ø—Ä–æ –º–µ–Ω—è" = 0 –±–∞–ª–ª–æ–≤
  const scoreForAnswer = 3 - answer;
  const currentScore = userState.archetypeScores.get(currentQuestion.archetype) || 0;
  userState.archetypeScores.set(currentQuestion.archetype, currentScore + scoreForAnswer);

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  userState.currentQuestionIndex++;

  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  try {
    await ctx.deleteMessage();
  } catch (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
  await sendQuestion(ctx, userId);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Mixpanel
  trackEvent(userId, 'question_answered', {
    questionIndex: userState.currentQuestionIndex,
    answer: answer,
    archetype: currentQuestion.archetype
  });
});

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
async function showResults(ctx, userId) {
  const userState = userStates.get(userId);

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä—Ö–µ—Ç–∏–ø—ã –ø–æ –±–∞–ª–ª–∞–º (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
  const sortedArchetypes = Array.from(userState.archetypeScores.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, 4); // –ë–µ—Ä–µ–º —Ç–æ–ø-4

  let resultMessage = `‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ 

4 –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö –∞—Ä—Ö–µ—Ç–∏–ø–∞:`;

  // –°—É–º–º–∞ –±–∞–ª–ª–æ–≤ —Ç–æ–ø-4 –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
  const topSum = sortedArchetypes.reduce((acc, [_, score]) => acc + score, 0) || 1;

  sortedArchetypes.forEach((archetype, index) => {
    const [name, score] = archetype;
    // –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—É–º–º—ã —Ç–æ–ø-4
    const percentage = Math.round((score / topSum) * 100);
    resultMessage += `${index + 1}. ${name}: ${score} –±–∞–ª–ª–æ–≤ (${percentage}%)\n`;
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  await ctx.reply(resultMessage);

  // –°–æ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–π
  const documents = [];
  for (let i = 0; i < sortedArchetypes.length; i++) {
    const [archetypeName] = sortedArchetypes[i];
    const pdfPath = getArchetypePdfPath(archetypeName);
    if (pdfPath) {
      documents.push({ type: 'document', media: { source: pdfPath } });
    }
  }
  if (documents.length > 0) {
    await ctx.replyWithMediaGroup(documents);
  }

  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userStates.delete(userId);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Mixpanel
  trackEvent(userId, 'test_completed', {
    topArchetypes: sortedArchetypes
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è callback query –æ—à–∏–±–æ–∫
  if (err.description && err.description.includes('query is too old')) {
    console.log('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback query');
    return;
  }

  // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  try {
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å /start');
  } catch (replyError) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError);
  }
});

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(async (ctx, next) => {
  const start = new Date();
  await next();
  const ms = new Date() - start;
  console.log('Response time: %sms', ms);
});

// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, async () => {
  console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä Health check: http://localhost:${PORT}/health`);
  console.log(`üìà Status: http://localhost:${PORT}/status`);
  console.log(`üîó Webhook: http://localhost:${PORT}/webhook`);
  console.log(`‚öôÔ∏è Set webhook: http://localhost:${PORT}/set-webhook`);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–º–µ–Ω)
  if (process.env.WEBHOOK_URL) {
    try {
      await bot.telegram.setWebhook(process.env.WEBHOOK_URL);
      console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${process.env.WEBHOOK_URL}`);
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:', error.message);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const questionsFolder = path.join(__dirname, 'questions');
  if (fs.existsSync(questionsFolder)) {
    const files = fs.readdirSync(questionsFolder);
    console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ questions/`);
  } else {
    console.log('‚ö†Ô∏è –ü–∞–ø–∫–∞ questions/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PDF —Ñ–∞–π–ª–æ–≤ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
  const answersFolder = path.join(__dirname, 'answers');
  if (fs.existsSync(answersFolder)) {
    const pdfFiles = fs.readdirSync(answersFolder).filter(file => file.endsWith('.pdf'));
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${pdfFiles.length} PDF —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ answers/`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ PDF —Ñ–∞–π–ª–æ–≤ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
    const archetypeNames = Object.keys(archetypesData);
    const missingPdfs = archetypeNames.filter(archetype => {
      const pdfPath = path.join(answersFolder, archetype.toLowerCase() + '.pdf');
      return !fs.existsSync(pdfPath);
    });
    
    if (missingPdfs.length > 0) {
      console.log('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç PDF —Ñ–∞–π–ª—ã –¥–ª—è –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤:', missingPdfs);
    } else {
      console.log('‚úÖ –í—Å–µ PDF —Ñ–∞–π–ª—ã –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –Ω–∞–π–¥–µ–Ω—ã');
    }
  } else {
    console.log('‚ö†Ô∏è –ü–∞–ø–∫–∞ answers/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  // Graceful stop (—Ç–æ–ª—å–∫–æ –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞, –Ω–µ –¥–ª—è –±–æ—Ç–∞)
  process.once('SIGINT', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
      console.log('HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    });
  });
  
  process.once('SIGTERM', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
      console.log('HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    });
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback queries (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
  bot.action(/.*/, async (ctx) => {
    try {
      await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query:', error.message);
    }
  });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–±–µ–∑ launch)
console.log('ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ webhook!');
console.log('üìù –î–æ–±–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É questions/');
console.log('üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ');
console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(archetypesData).length} –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ —Å ${questions.length} –≤–æ–ø—Ä–æ—Å–∞–º–∏`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const questionsFolder = path.join(__dirname, 'questions');
if (fs.existsSync(questionsFolder)) {
  const files = fs.readdirSync(questionsFolder);
  console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ questions/`);
} else {
  console.log('‚ö†Ô∏è –ü–∞–ø–∫–∞ questions/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PDF —Ñ–∞–π–ª–æ–≤ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
const answersFolder = path.join(__dirname, 'answers');
if (fs.existsSync(answersFolder)) {
  const pdfFiles = fs.readdirSync(answersFolder).filter(file => file.endsWith('.pdf'));
  console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${pdfFiles.length} PDF —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ answers/`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ PDF —Ñ–∞–π–ª–æ–≤ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
  const archetypeNames = Object.keys(archetypesData);
  const missingPdfs = archetypeNames.filter(archetype => {
    const pdfPath = path.join(answersFolder, archetype.toLowerCase() + '.pdf');
    return !fs.existsSync(pdfPath);
  });
  
  if (missingPdfs.length > 0) {
    console.log('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç PDF —Ñ–∞–π–ª—ã –¥–ª—è –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤:', missingPdfs);
  } else {
    console.log('‚úÖ –í—Å–µ PDF —Ñ–∞–π–ª—ã –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –Ω–∞–π–¥–µ–Ω—ã');
  }
} else {
  console.log('‚ö†Ô∏è –ü–∞–ø–∫–∞ answers/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
}

// Graceful stop (—Ç–æ–ª—å–∫–æ –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞, –Ω–µ –¥–ª—è –±–æ—Ç–∞)
process.once('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  server.close(() => {
    console.log('HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

process.once('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
  server.close(() => {
    console.log('HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback queries (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
bot.action(/.*/, async (ctx) => {
  try {
    await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  } catch (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query:', error.message);
  }
});

bot.action('check_subscription', async (ctx) => {
  const userId = ctx.from.id;
  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    await ctx.answerCbQuery('–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!', { show_alert: true });
    await ctx.reply('–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è".', {
      reply_markup: getSubscriptionKeyboard()
    });
    return;
  }
  // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É /start, –Ω–æ –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  const hasState = userStates.has(userId);
  const buttonText = hasState ? 'üîÑ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞' : '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç';
  const callbackData = hasState ? 'restart_test' : 'start_test';
  await ctx.reply(`–ù–∞ –∫–∞–∂–¥–æ–º —Å–ª–∞–π–¥–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.\n–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤—ã–±—Ä–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥–æ–µ –∏–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç.\n–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å —á–µ—Å—Ç–Ω–æ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.`, {
    reply_markup: {
      inline_keyboard: [[{ text: buttonText, callback_data: callbackData }]]
    }
  });
});