require('dotenv').config();
const { Telegraf } = require('telegraf');
const fs = require('fs');
const path = require('path');
const http = require('http');
const { logEvent } = require('./logger');
const { trackEvent, setUserOnce } = require('./analytics');

// –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
const userService = require('./services/userService');
const testResultService = require('./services/testResultService');
const AdminPanelHandler = require('./handlers/adminPanel');

// –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –º–∏–≥—Ä–∞—Ü–∏–π
const { runMigrations } = require('./migrations/migrate');

const allowedToContinue = new Set();
const waitingForComment = new Set();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
function getUserState(userId) {
  return userStates.get(userId) || null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
const adminPanel = new AdminPanelHandler(bot, getUserState);

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
const archetypesData = JSON.parse(fs.readFileSync('./questions.json', 'utf8'));

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É –æ—Ç 1 –¥–æ 84
// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
const allQuestions = [];
const archetypeNames = Object.keys(archetypesData);

for (const archetype of archetypeNames) {
  for (const imageName of archetypesData[archetype]) {
    allQuestions.push({
      text: imageName,
      archetype: archetype
    });
  }
}

// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –≤ text –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const questions = allQuestions.sort((a, b) => {
  const numA = parseInt(a.text);
  const numB = parseInt(b.text);
  return numA - numB;
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
const userStates = new Map();

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState {
  constructor() {
    this.currentQuestionIndex = 0;
    this.answers = [];
    this.archetypeScores = new Map();
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
function initializeArchetypeScores() {
  const scores = new Map();
  Object.keys(archetypesData).forEach(archetype => {
    scores.set(archetype, 0);
  });
  return scores;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function getImagePath(imageName) {
  const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];

  for (const ext of imageExtensions) {
    const imagePath = path.join(__dirname, 'questions', imageName + ext);
    if (fs.existsSync(imagePath)) {
      return imagePath;
    }
  }

  return null; // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ PDF —Ñ–∞–π–ª—É –∞—Ä—Ö–µ—Ç–∏–ø–∞
function getArchetypePdfPath(archetypeName) {
  const pdfPath = path.join(__dirname, 'answers', archetypeName.toLowerCase() + '.pdf');
  if (fs.existsSync(pdfPath)) {
    return pdfPath;
  }
  return null; // PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
}

// HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook –∏ health check
const server = http.createServer(async (req, res) => {
  res.setHeader('Content-Type', 'application/json');
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }

  // Webhook endpoint –¥–ª—è Telegram
  if (req.url === '/webhook' && req.method === 'POST') {
    let body = '';
    req.on('data', chunk => {
      body += chunk.toString();
    });

    req.on('end', async () => {
      try {
        const update = JSON.parse(body);
        await bot.handleUpdate(update);
        res.writeHead(200);
        res.end('OK');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.writeHead(500);
        res.end('Error');
      }
    });
    return;
  }

  // Health check endpoints
  if (req.url === '/health' || req.url === '/') {
    const healthData = {
      status: 'ok',
      timestamp: new Date().toISOString(),
      bot: {
        name: 'Archetype Test Bot',
        version: '1.0.0',
        uptime: process.uptime(),
        users: userStates.size,
        questions: questions.length,
        archetypes: Object.keys(archetypesData).length,
        webhook: true
      },
      system: {
        memory: process.memoryUsage(),
        platform: process.platform,
        nodeVersion: process.version
      }
    };

    res.writeHead(200);
    res.end(JSON.stringify(healthData, null, 2));
  } else if (req.url === '/status') {
    const statusData = {
      status: 'running',
      uptime: process.uptime(),
      activeUsers: userStates.size,
      totalQuestions: questions.length,
      archetypes: Object.keys(archetypesData),
      webhook: true
    };

    res.writeHead(200);
    res.end(JSON.stringify(statusData, null, 2));
  } else if (req.url === '/set-webhook') {
    // Endpoint –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
    try {
      const webhookUrl = process.env.WEBHOOK_URL;
      await bot.telegram.setWebhook(webhookUrl);
      res.writeHead(200);
      res.end(JSON.stringify({
        success: true,
        webhookUrl: webhookUrl,
        message: 'Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
      res.writeHead(500);
      res.end(JSON.stringify({
        success: false,
        error: error.message
      }));
    }
  } else {
    res.writeHead(404);
    res.end(JSON.stringify({ error: 'Not Found' }));
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
function isOwner(userId) {
  const ownerId = process.env.ADMIN_USER_ID;
  return ownerId && userId.toString() === ownerId.toString();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
async function checkSubscription(userId) {
  // –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  if (isOwner(userId)) {
    console.log('üîë –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', userId);
    return true;
  }
  
  const channelId = process.env.REQUIRED_CHANNEL_ID;
  if (!channelId) return true; // –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
  try {
    const member = await bot.telegram.getChatMember(channelId, userId);
    // –°—Ç–∞—Ç—É—Å—ã, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º
    const allowed = ['member', 'administrator', 'creator'];
    return allowed.includes(member.status);
  } catch (e) {
    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
    return false;
  }
}

function getChannelLink() {
  const link = process.env.REQUIRED_CHANNEL_LINK;
  if (!link) return undefined;
  if (link.startsWith('@')) {
    return `https://t.me/${link.slice(1)}`;
  }
  return link;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
function getSubscriptionKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url: getChannelLink() }
      ],
      [
        { text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', callback_data: 'start_test' }
      ]
    ]
  };
}

function getReplyStartKeyboard() {
  return {
    keyboard: [[{ text: '/start' }]],
    resize_keyboard: true,
    one_time_keyboard: true
  };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  const userId = ctx.from.id;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  try {
    await userService.upsertUser({
      telegram_id: userId,
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name,
      language_code: ctx.from.language_code
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î:', error);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Mixpanel (people.set_once)
  setUserOnce(userId, {
    username: ctx.from.username,
    first_name: ctx.from.first_name + ' ' + ctx.from.last_name,
    language_code: ctx.from.language_code,
  });
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Mixpanel
  trackEvent(userId, 'start_command', {});
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç —Ä–∞–Ω–µ–µ
  const hasState = userStates.has(userId);
  const buttonText = hasState ? 'üîÑ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞' : '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç';
  const callbackData = hasState ? 'restart_test' : 'start_test';
  await ctx.reply(`–ù–∞ –∫–∞–∂–¥–æ–º —Å–ª–∞–π–¥–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.
–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤—ã–±—Ä–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∫–∞–∂–¥–æ–µ –∏–∑ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç.
–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å —á–µ—Å—Ç–Ω–æ –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.`, {
    reply_markup: {
      inline_keyboard: [[{ text: buttonText, callback_data: callbackData }]]
    }
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç" –∏–ª–∏ "–ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞"
bot.action(['start_test', 'restart_test'], async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    await ctx.reply('–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.', {
      reply_markup: getSubscriptionKeyboard()
    });
    return;
  }
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Mixpanel
  trackEvent(userId, 'test_started', {});
  userStates.set(userId, {
    currentQuestionIndex: 0,
    answers: [],
    archetypeScores: initializeArchetypeScores()
  });
  await sendQuestion(ctx, userId);
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendQuestion(ctx, userId) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    await ctx.reply('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /start.', {
      reply_markup: getSubscriptionKeyboard()
    });
    return;
  }
  const userState = userStates.get(userId);
  console.log('sendQuestion –¥–ª—è', userId, 'currentQuestionIndex:', userState.currentQuestionIndex, 'allowedToContinue:', Array.from(allowedToContinue), 'waitingForComment:', Array.from(waitingForComment));

  // --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ 5-–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ---
  if (userState.currentQuestionIndex > 0 && userState.currentQuestionIndex % 5 === 0) {
    // –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    if (isOwner(userId)) {
      console.log('üîë –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω –æ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', userId);
    } else if (!allowedToContinue.has(userId)) {
      waitingForComment.add(userId);
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –¥–æ–±–∞–≤–ª–µ–Ω –≤ waitingForComment:', Array.from(waitingForComment));
      await ctx.reply(
        '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º "—Ç–µ—Å—Ç" –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ, –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ç–µ—Å—Ç',
        {
          reply_markup: {
            inline_keyboard: [[{ text: '–ì—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', url: process.env.COMMENT_GROUP_LINK }]]
          }
        }
      );
      return; // –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç!
    }
  }

  if (userState.currentQuestionIndex >= questions.length) {
    // –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    showResults(ctx, userId);
    return;
  }

  const question = questions[userState.currentQuestionIndex];
  const questionNumber = userState.currentQuestionIndex + 1;
  const totalQuestions = questions.length;

  // –≠–º–æ–¥–∑–∏ —à–∫–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const progressBarLength = 10;
  const filled = Math.round((questionNumber) / totalQuestions * progressBarLength);
  const progressBar = 'üü©'.repeat(filled) + '‚¨ú'.repeat(progressBarLength - filled);

  // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞
  const imagePath = getImagePath(question.text);

  const keyboard = {
    inline_keyboard: [
      [
        { text: '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω(–Ω–∞)', callback_data: 'answer_0' }
      ],
      [
        { text: '–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç', callback_data: 'answer_1' }
      ],
      [
        { text: '–ù–µ –∑–Ω–∞—é', callback_data: 'answer_2' }
      ],
      [
        { text: '–≠—Ç–æ —Å–æ–≤—Å–µ–º –Ω–µ –ø—Ä–æ –º–µ–Ω—è', callback_data: 'answer_3' }
      ]
    ]
  };

  try {
    if (imagePath) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–∞–º–∏
      const caption = `–í–æ–ø—Ä–æ—Å ${questionNumber} –∏–∑ ${totalQuestions}\n${progressBar}`;
      await ctx.replyWithPhoto(
        { source: imagePath },
        {
          caption: caption,
          reply_markup: keyboard
        }
      );
    } else {
      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = `–í–æ–ø—Ä–æ—Å ${questionNumber} –∏–∑ ${totalQuestions}:\n${progressBar}\n\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "${question.text}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–ø–∫–µ questions/`;
      await ctx.reply(message, { reply_markup: keyboard });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    // Fallback –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `–í–æ–ø—Ä–æ—Å ${questionNumber} –∏–∑ ${totalQuestions}:\n${progressBar}\n\n${question.text}`;
    await ctx.reply(message, { reply_markup: keyboard });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.action(/answer_(\d)/, async (ctx) => {
  const userId = ctx.from.id;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    await ctx.reply('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ /start.', {
      reply_markup: getSubscriptionKeyboard()
    });
    return;
  }
  const answer = parseInt(ctx.match[1]);

  // –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
  try {
    await ctx.answerCbQuery();
  } catch (error) {
    console.log('Callback query —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª:', error.message);
    return;
  }

  if (!userStates.has(userId)) {
    ctx.reply('–¢–µ—Å—Ç –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞ —Å–µ—Å—Å–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'start_test' }]
        ]
      }
    });
    return;
  }

  const userState = userStates.get(userId);
  const currentQuestion = questions[userState.currentQuestionIndex];

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
  userState.answers.push({
    questionIndex: userState.currentQuestionIndex,
    answer: answer,
    archetype: currentQuestion.archetype
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∫ –∞—Ä—Ö–µ—Ç–∏–ø—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  // 0 = "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω" = 3 –±–∞–ª–ª–∞
  // 1 = "–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç" = 2 –±–∞–ª–ª–∞  
  // 2 = "–ù–µ –∑–Ω–∞—é" = 1 –±–∞–ª–ª
  // 3 = "–≠—Ç–æ —Å–æ–≤—Å–µ–º –Ω–µ –ø—Ä–æ –º–µ–Ω—è" = 0 –±–∞–ª–ª–æ–≤
  const scoreForAnswer = 3 - answer;
  const currentScore = userState.archetypeScores.get(currentQuestion.archetype) || 0;
  userState.archetypeScores.set(currentQuestion.archetype, currentScore + scoreForAnswer);

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  userState.currentQuestionIndex++;

  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  try {
    await ctx.deleteMessage();
  } catch (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
  await sendQuestion(ctx, userId);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Mixpanel
  trackEvent(userId, 'question_answered', {
    questionIndex: userState.currentQuestionIndex,
    answer: answer,
    archetype: currentQuestion.archetype
  });
});

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
async function showResults(ctx, userId) {
  const userState = userStates.get(userId);

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä—Ö–µ—Ç–∏–ø—ã –ø–æ –±–∞–ª–ª–∞–º (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
  const sortedArchetypes = Array.from(userState.archetypeScores.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, 4); // –ë–µ—Ä–µ–º —Ç–æ–ø-4

  let resultMessage = `‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ 

4 –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö –∞—Ä—Ö–µ—Ç–∏–ø–∞:`;

  // –°—É–º–º–∞ –±–∞–ª–ª–æ–≤ —Ç–æ–ø-4 –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
  const topSum = sortedArchetypes.reduce((acc, [_, score]) => acc + score, 0) || 1;

  sortedArchetypes.forEach((archetype, index) => {
    const [name, score] = archetype;
    // –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—É–º–º—ã —Ç–æ–ø-4
    const percentage = Math.round((score / topSum) * 100);
    resultMessage += `${index + 1}. ${name}: ${score} –±–∞–ª–ª–æ–≤ (${percentage}%)\n`;
  });

  resultMessage += `\n\n–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –≤—ã–¥–µ–ª—è—é—Ç 12 –∫–ª—é—á–µ–≤—ã—Ö –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤:
 1. üê£ –î–∏—Ç—è ‚Äî –î–æ–≤–µ—Ä–∏–µ, –ú–µ—á—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 2. üßë‚Äçü§ù‚Äçüßë –°–ª–∞–≤–Ω—ã–π –º–∞–ª—ã–π ‚Äî –î—Ä—É–∂–±–∞, –†–∞–≤–µ–Ω—Å—Ç–≤–æ
 3. üõ° –û–ø–µ–∫—É–Ω ‚Äî –ó–∞–±–æ—Ç–∞, –°–µ–º—å—è
 4. üß≠ –ò—Å–∫–∞—Ç–µ–ª—å ‚Äî –ù–æ–≤–∏–∑–Ω–∞, –ê–≤–∞–Ω—Ç—é—Ä–∏–∑–º
 5. üî• –ë—É–Ω—Ç–∞—Ä—å ‚Äî –ü—Ä–æ–≤–æ–∫–∞—Ü–∏—è, –ë–æ—Ä—å–±–∞ –∑–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å
 6. ‚öîÔ∏è –í–æ–∏–Ω ‚Äî –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –õ–∏–¥–µ—Ä—Å—Ç–≤–æ
 7. üíò –õ—é–±–æ–≤–Ω–∏–∫ ‚Äî –õ—é–±–æ–≤—å, –≠—Å—Ç–µ—Ç–∏–∫–∞
 8. üé® –¢–≤–æ—Ä–µ—Ü ‚Äî –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
 9. üé≠ –®—É—Ç ‚Äî –Æ–º–æ—Ä, –•–∞—Ä–∏–∑–º–∞
 10. üìö –ú—É–¥—Ä–µ—Ü ‚Äî –ù–∞—É–∫–∞, –û–ø—ã—Ç
 11. üßô‚Äç‚ôÇÔ∏è –ú–∞–≥ ‚Äî –¢–∞–π–Ω–∞, –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
 12. üëë –ü—Ä–∞–≤–∏—Ç–µ–ª—å ‚Äî –í–ª–∞—Å—Ç—å, –ü–æ—Ä—è–¥–æ–∫

–í –∫–∞–∂–¥–æ–º –∏–∑ –Ω–∞—Å —ç—Ç–∏ –∞—Ä—Ö–µ—Ç–∏–ø—ã –∑–∞–ª–æ–∂–µ–Ω—ã –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –Ω–æ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ò—Å—Ö–æ–¥—è –∏–∑ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞, —á–∞—â–µ –æ–ø–∏—Ä–∞–µ–º—Å—è –Ω–∞ —Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —á—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –≤–µ–¥—É—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. 

–û–¥–Ω–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞ —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ú—ã –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤–æ –≤—Å–µ—Ö —Å—Ñ–µ—Ä–∞—Ö: —Ä–∞–±–æ—Ç–∞, —Å–µ–º—å—è, —Ö–æ–±–±–∏, –¥—Ä—É–∂–±–∞ –∏ —Ç–¥. –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–µ–Ω—è–µ—Ç—Å—è, –∏ –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º –≤–∫–ª—é—á–∞—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ä–æ–ª–∏.

–≠—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤ –∫–∞—Ä—Ç–µ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –Ω–µ—Ç –ª—é–±–æ–≤–Ω–∏–∫–∞, –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ —Ç–∞–∫–æ–µ –ª—é–±–∏—Ç—å. –û–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è, —Å—Ç–∞–≤—è –Ω–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –¥—Ä—É–≥–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–∞—Ä—å–µ—Ä—É, –µ—Å–ª–∏ –æ–Ω –í–æ–∏–Ω. –ò–ª–∏ –∑–∞–±–æ—Ç—É, –µ—Å–ª–∏ –û–ø–µ–∫—É–Ω.

–ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –∏–º–µ–Ω–Ω–æ 4 –∞—Ä—Ö–µ—Ç–∏–ø–∞ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–µ —è–¥—Ä–æ. –û–Ω–∏ –Ω–µ –∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—Ç –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º, –∞ –∑–∞–∫—Ä—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∂–∏–∑–Ω–∏, –ø–æ–∑–≤–æ–ª—è—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≥–∏–±–∫–æ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.

–≠—Ç–æ –∏ —Å–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∏—á–Ω–æ—Å—Ç–∏. –¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–æ–±–æ–π –≤ –ª—é–±—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö.`

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  await ctx.reply(resultMessage);


  // –°–æ–±–∏—Ä–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä—É–ø–ø–æ–π
  const documents = [];
  for (let i = 0; i < sortedArchetypes.length; i++) {
    const [archetypeName] = sortedArchetypes[i];
    const pdfPath = getArchetypePdfPath(archetypeName);
    if (pdfPath) {
      documents.push({ type: 'document', media: { source: pdfPath } });
    }
  }
  if (documents.length > 0) {
    await ctx.replyWithMediaGroup(documents);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  try {
    await testResultService.saveTestResults(userId, userState.archetypeScores);
    await testResultService.saveQuestionAnswers(userId, userState.answers);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î:', error);
  }

  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userStates.delete(userId);
  allowedToContinue.delete(userId); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
  waitingForComment.delete(userId); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Mixpanel
  trackEvent(userId, 'test_completed', {
    topArchetypes: sortedArchetypes
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è callback query –æ—à–∏–±–æ–∫
  if (err.description && err.description.includes('query is too old')) {
    console.log('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback query');
    return;
  }

  // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  try {
    ctx.reply(
      '–¢–µ—Å—Ç –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞ —Å–µ—Å—Å–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ:',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'start_test' }]
          ]
        }
      }
    );
  } catch (replyError) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError);
  }
});

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(async (ctx, next) => {
  const start = new Date();
  await next();
  const ms = new Date() - start;
  console.log('Response time: %sms', ms);
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
bot.use(async (ctx, next) => {
  if (ctx.message && ctx.message.text && !ctx.message.text.startsWith('/')) {
    const handled = await adminPanel.handleTextMessage(ctx);
    if (handled) {
      return; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
    }
  }
  await next();
});

// –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, async () => {
  console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä Health check: http://localhost:${PORT}/health`);
  console.log(`üìà Status: http://localhost:${PORT}/status`);
  console.log(`üîó Webhook: http://localhost:${PORT}/webhook`);
  console.log(`‚öôÔ∏è Set webhook: http://localhost:${PORT}/set-webhook`);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  if (process.env.DATABASE_URL) {
    try {
      console.log('üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await runMigrations();
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error.message);
      console.log('‚ö†Ô∏è –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
  } else {
    console.log('‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã');
    console.log('üí° –î–ª—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ');
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–º–µ–Ω)
  if (process.env.WEBHOOK_URL) {
    try {
      await bot.telegram.setWebhook(process.env.WEBHOOK_URL);
      console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${process.env.WEBHOOK_URL}`);
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:', error.message);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const questionsFolder = path.join(__dirname, 'questions');
  if (fs.existsSync(questionsFolder)) {
    const files = fs.readdirSync(questionsFolder);
    console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ questions/`);
  } else {
    console.log('‚ö†Ô∏è –ü–∞–ø–∫–∞ questions/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PDF —Ñ–∞–π–ª–æ–≤ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
  const answersFolder = path.join(__dirname, 'answers');
  if (fs.existsSync(answersFolder)) {
    const pdfFiles = fs.readdirSync(answersFolder).filter(file => file.endsWith('.pdf'));
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${pdfFiles.length} PDF —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ answers/`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ PDF —Ñ–∞–π–ª–æ–≤ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º
    const archetypeNames = Object.keys(archetypesData);
    const missingPdfs = archetypeNames.filter(archetype => {
      const pdfPath = path.join(answersFolder, archetype.toLowerCase() + '.pdf');
      return !fs.existsSync(pdfPath);
    });
    
    if (missingPdfs.length > 0) {
      console.log('‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç PDF —Ñ–∞–π–ª—ã –¥–ª—è –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤:', missingPdfs);
    } else {
      console.log('‚úÖ –í—Å–µ PDF —Ñ–∞–π–ª—ã –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ –Ω–∞–π–¥–µ–Ω—ã');
    }
  } else {
    console.log('‚ö†Ô∏è –ü–∞–ø–∫–∞ answers/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }
  
  // Graceful stop (—Ç–æ–ª—å–∫–æ –¥–ª—è HTTP —Å–µ—Ä–≤–µ—Ä–∞, –Ω–µ –¥–ª—è –±–æ—Ç–∞)
  process.once('SIGINT', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
      console.log('HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    });
  });
  
  process.once('SIGTERM', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
      console.log('HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    });
  });
});

// –£–î–ê–õ–ï–ù: –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback queries –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
bot.action('check_subscription', async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  const isSubscribed = await checkSubscription(userId);
  if (!isSubscribed) {
    await ctx.reply('–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
      reply_markup: getSubscriptionKeyboard()
    });
    return;
  }
  await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.', {
    reply_markup: {
      inline_keyboard: [[{ text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', callback_data: 'start_test' }]]
    }
  });
});

// --- –î–û–ë–ê–í–õ–ï–ù–û: –ö–æ–º–∞–Ω–¥–∞ /continue –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
bot.command('continue', async (ctx) => {
  const userId = ctx.from.id;
  console.log('/continue –æ—Ç', userId, 'waitingForComment:', Array.from(waitingForComment), 'allowedToContinue:', Array.from(allowedToContinue));
  if (waitingForComment.has(userId)) {
    if (allowedToContinue.has(userId)) {
      waitingForComment.delete(userId);
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç');
      await sendQuestion(ctx, userId);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Ä—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await ctx.reply(
        '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π:\n\n' +
        '1Ô∏è‚É£ –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º "—Ç–µ—Å—Ç" –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ\n' +
        '2Ô∏è‚É£ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ì—Ä—É–ø–ø–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è', url: process.env.COMMENT_GROUP_LINK }],
              [{ text: '–Ø –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data: 'confirm_comment' }]
            ]
          }
        }
      );
    }
  } else {
    await ctx.reply('–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–µ–π—á–∞—Å.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
bot.action('confirm_comment', async (ctx) => {
  const userId = ctx.from.id;
  console.log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
  
  if (waitingForComment.has(userId)) {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    allowedToContinue.add(userId);
    waitingForComment.delete(userId);
    
    await ctx.answerCbQuery('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!');
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç');
    await sendQuestion(ctx, userId);
  } else {
    await ctx.answerCbQuery('‚ùå –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–µ–π—á–∞—Å');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
bot.command('debug_comment', async (ctx) => {
  const userId = ctx.from.id;
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
  
  const isWaiting = waitingForComment.has(userId);
  const isAllowed = allowedToContinue.has(userId);
  
  let message = `üîç *–û—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤*\n\n`;
  message += `*–í–∞—à ID:* \`${userId}\`\n`;
  message += `*–û–∂–∏–¥–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${isWaiting ? '–î–∞' : '–ù–µ—Ç'}\n`;
  message += `*–†–∞–∑—Ä–µ—à—ë–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:* ${isAllowed ? '–î–∞' : '–ù–µ—Ç'}\n`;
  message += `*COMMENT_GROUP_ID:* \`${COMMENT_GROUP_ID || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\`\n`;
  message += `*–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* \`[1087968824]\`\n\n`;
  
  if (isWaiting && !isAllowed) {
    message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`;
    message += `1. –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π "—Ç–µ—Å—Ç" –≤ –≥—Ä—É–ø–ø–µ\n`;
    message += `2. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"\n`;
    message += `3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /force_continue`;
  }
  
  await ctx.reply(message, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
bot.command('force_continue', async (ctx) => {
  const userId = ctx.from.id;
  console.log('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
  
  if (waitingForComment.has(userId)) {
    allowedToContinue.add(userId);
    waitingForComment.delete(userId);
    
    await ctx.reply('üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!');
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç–µ—Å—Ç');
    await sendQuestion(ctx, userId);
  } else {
    await ctx.reply('‚ùå –í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ');
  }
});

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —Ç–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
bot.command('simple_test', async (ctx) => {
  const userId = ctx.from.id;
  
  if (!isOwner(userId)) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.');
    return;
  }
  
  console.log('üöÄ SIMPLE TEST: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é inline –∫–Ω–æ–ø–∫—É');
  
  await ctx.reply('üöÄ –ü–†–û–°–¢–û–ô –¢–ï–°–¢: –í–æ—Ç inline –∫–Ω–æ–ø–∫–∞', {
    reply_markup: {
      inline_keyboard: [[
        { text: 'üéØ –¢–ï–°–¢', callback_data: 'simple_test_button' }
      ]]
    }
  });
  
  console.log('‚úÖ SIMPLE TEST: inline –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
  
  await ctx.reply('üöÄ –ü–†–û–°–¢–û–ô –¢–ï–°–¢: –í–æ—Ç reply –∫–Ω–æ–ø–∫–∞', {
    reply_markup: {
      keyboard: [['üéØ –¢–ï–°–¢ REPLY']],
      resize_keyboard: true
    }
  });
  
  console.log('‚úÖ SIMPLE TEST: reply –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ç–æ–π –∫–Ω–æ–ø–∫–∏
bot.action('simple_test_button', async (ctx) => {
  console.log('üéØ SIMPLE TEST: Inline –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!');
  await ctx.answerCbQuery('üéØ Inline –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  await ctx.reply('‚úÖ INLINE –ö–ù–û–ü–ö–ê –°–†–ê–ë–û–¢–ê–õ–ê!');
});

bot.hears('üéØ –¢–ï–°–¢ REPLY', async (ctx) => {
  console.log('üéØ SIMPLE TEST: Reply –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!');
  await ctx.reply('‚úÖ REPLY –ö–ù–û–ü–ö–ê –°–†–ê–ë–û–¢–ê–õ–ê!');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ Telegram ID
bot.command('my_id', async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username;
  const firstName = ctx.from.first_name;
  const isBot = ctx.from.is_bot;
  const isOwnerUser = isOwner(userId);
  
  console.log('üÜî –ó–∞–ø—Ä–æ—Å ID –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, username, firstName, 'is_bot:', isBot, 'is_owner:', isOwnerUser);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
  let isAdminUser = false;
  try {
    isAdminUser = await userService.isAdmin(userId);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤:', error.message);
  }
  
  let message = `üÜî *–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n\n`;
  message += `*ID:* \`${userId}\`\n`;
  message += `*Username:* ${username ? '@' + username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
  message += `*–ò–º—è:* ${firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
  message += `*–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:* ${isBot ? '–ë–æ—Ç' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n`;
  message += `*–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞:* ${isOwnerUser ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n`;
  message += `*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* ${isAdminUser ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n\n`;
  
  if (isOwnerUser) {
    message += `üëë *–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞:*\n`;
    message += `‚Ä¢ –ü—Ä–æ—Ö–æ–¥ —Ç–µ—Å—Ç–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª\n`;
    message += `‚Ä¢ –ü—Ä–æ—Ö–æ–¥ —Ç–µ—Å—Ç–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n`;
    message += `‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (/admin)\n\n`;
  }
  
  message += `*–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö ID:* \`[1087968824]\`\n`;
  message += `*ADMIN_USER_ID:* \`${process.env.ADMIN_USER_ID || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\`\n`;
  message += `*DATABASE_URL:* ${process.env.DATABASE_URL ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`;
  
  await ctx.reply(message, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
bot.command('test_keyboard', async (ctx) => {
  const userId = ctx.from.id;
  
  if (!isOwner(userId)) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.');
    return;
  }
  
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...');
  
  // –¢–µ—Å—Ç 1: –°–∞–º–∞—è –ø—Ä–æ—Å—Ç–∞—è inline –∫–Ω–æ–ø–∫–∞
  try {
    await ctx.reply('üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è inline –∫–Ω–æ–ø–∫–∞', {
      reply_markup: {
        inline_keyboard: [[
          { text: '‚úÖ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∞', callback_data: 'test_button' }
        ]]
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç 1 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¢–µ—Å—Ç 1:', error);
  }
  
  // –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–∞—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞  
  try {
    await ctx.reply('üß™ –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç–∞—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', {
      reply_markup: {
        keyboard: [['‚úÖ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∞']],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    });
    console.log('‚úÖ –¢–µ—Å—Ç 2 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¢–µ—Å—Ç 2:', error);
  }
  
  // –¢–µ—Å—Ç 3: –ß–µ—Ä–µ–∑ Markup.inlineKeyboard  
  try {
    const { Markup } = require('telegraf');
    await ctx.reply('üß™ –¢–µ—Å—Ç 3: Markup.inlineKeyboard', {
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –¢–µ—Å—Ç Markup', 'test_markup')]
      ])
    });
    console.log('‚úÖ –¢–µ—Å—Ç 3 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¢–µ—Å—Ç 3:', error);
  }
  
  // –¢–µ—Å—Ç 4: –ß–µ—Ä–µ–∑ Markup.keyboard
  try {
    const { Markup } = require('telegraf');
    await ctx.reply('üß™ –¢–µ—Å—Ç 4: Markup.keyboard', {
      reply_markup: Markup.keyboard([['‚úÖ –¢–µ—Å—Ç Markup Reply']]).resize()
    });
    console.log('‚úÖ –¢–µ—Å—Ç 4 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¢–µ—Å—Ç 4:', error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
bot.command('test_db', async (ctx) => {
  const userId = ctx.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞
  if (!isOwner(userId)) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.');
    return;
  }
  
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  let message = 'üîç *–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:*\n\n';
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const user = await userService.getUserByTelegramId(userId);
    message += `*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î:* ${user ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n`;
    
    if (user) {
      message += `*ID –≤ –ë–î:* ${user.id}\n`;
      message += `*is_admin:* ${user.is_admin ? '‚úÖ true' : '‚ùå false'}\n`;
      message += `*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* ${user.created_at}\n`;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    const isAdminUser = await userService.isAdmin(userId);
    message += `*–ü—Ä–æ–≤–µ—Ä–∫–∞ isAdmin():* ${isAdminUser ? '‚úÖ true' : '‚ùå false'}\n\n`;
    
    message += '‚úÖ *–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç!*';
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î:', error);
    message += `‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:*\n\`${error.message}\``;
  }
  
  await ctx.reply(message, { parse_mode: 'Markdown' });
});

// --- –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –≥—Ä—É–ø–ø–µ ---
const COMMENT_GROUP_ID = process.env.COMMENT_GROUP_ID ? Number(process.env.COMMENT_GROUP_ID) : undefined;
if (!COMMENT_GROUP_ID) {
  console.warn('–í–Ω–∏–º–∞–Ω–∏–µ: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è COMMENT_GROUP_ID –Ω–µ –∑–∞–¥–∞–Ω–∞! –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –≥—Ä—É–ø–ø–µ.');
} else {
  console.log('‚úÖ COMMENT_GROUP_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', COMMENT_GROUP_ID);
}

bot.on('message', async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
  if (ctx.chat && ctx.chat.id === COMMENT_GROUP_ID) {
    console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã:', ctx.chat.id, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from?.id);
    const text = ctx.message.text || '';
    const userId = ctx.from?.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∞ –Ω–µ –±–æ—Ç –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –±–æ—Ç
    const allowedUsers = [1087968824]; // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à ID –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    
    if (userId && 
        userId !== 777000 && 
        (!ctx.from.is_bot || allowedUsers.includes(userId)) && 
        !ctx.message.is_automatic_forward && 
        text.toLowerCase().includes('—Ç–µ—Å—Ç')) {
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, text);
      allowedToContinue.add(userId);
      console.log('‚úÖ allowedToContinue —Ç–µ–ø–µ—Ä—å:', Array.from(allowedToContinue));
    } else {
      const reason = [];
      if (userId === 777000) reason.push('Telegram service');
      if (ctx.from?.is_bot && !allowedUsers.includes(userId)) reason.push('bot account');
      if (ctx.message.is_automatic_forward) reason.push('automatic forward');
      if (!text.toLowerCase().includes('—Ç–µ—Å—Ç')) reason.push('no "—Ç–µ—Å—Ç" keyword');
      
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è):', userId, text, '–ü—Ä–∏—á–∏–Ω–∞:', reason.join(', '));
    }
  } else if (ctx.chat) {
    console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã:', ctx.chat.id, '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≥—Ä—É–ø–ø–∞:', COMMENT_GROUP_ID);
  }
  await next();
});

// --- –î–û–ë–ê–í–õ–ï–ù–û: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å "—Ç–µ—Å—Ç" ---
bot.on('channel_post', async (ctx, next) => {
  // –≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  await next();
});

bot.on('raw', async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ update —Ç–∏–ø–∞ message –∏–ª–∏ message_delete
  const update = ctx.update;
  // –î–ª—è Telegraf 4.x –∏ –≤—ã—à–µ: —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ update.message_delete
  if (update.message && update.message.text && update.message.text.toLowerCase().includes('—Ç–µ—Å—Ç')) {
    // –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —É–¥–∞–ª–µ–Ω–∏–µ
    await next();
    return;
  }
  if (update.message && update.message.message_id && update.message.text === undefined && update.message.from) {
    // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ Telegraf –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é
    // –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º update.message.from.id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ allowedToContinue
    const userId = update.message.from.id;
    if (allowedToContinue.has(userId)) {
      allowedToContinue.delete(userId);
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å "—Ç–µ—Å—Ç", —É–¥–∞–ª—ë–Ω –∏–∑ allowedToContinue:', userId);
    }
  }
  await next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
bot.action('test_button', async (ctx) => {
  await ctx.answerCbQuery('‚úÖ –ü—Ä–æ—Å—Ç–∞—è inline –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  await ctx.reply('üéâ –ü—Ä–æ—Å—Ç–∞—è inline –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!');
});

bot.action('test_markup', async (ctx) => {
  await ctx.answerCbQuery('‚úÖ Markup inline –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  await ctx.reply('üéâ Markup inline –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!');
});

bot.hears('‚úÖ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∞', async (ctx) => {
  await ctx.reply('üéâ –ü—Ä–æ—Å—Ç–∞—è reply –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!');
});

bot.hears('‚úÖ –¢–µ—Å—Ç Markup Reply', async (ctx) => {
  await ctx.reply('üéâ Markup reply –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback queries (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –°–ê–ú–´–ú –ü–û–°–õ–ï–î–ù–ò–ú!)
bot.action(/.*/, async (ctx) => {
  console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query:', ctx.callbackQuery?.data);
  try {
    await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
  } catch (error) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query:', error.message);
  }
});