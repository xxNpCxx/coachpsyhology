const { pool } = require('../config/database');
const fs = require('fs');
const path = require('path');

async function ensureMigrationsTable() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS migrations (
        id SERIAL PRIMARY KEY,
        filename VARCHAR(255) UNIQUE NOT NULL,
        applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ migrations —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã migrations:', error);
    throw error;
  }
}

async function getAppliedMigrations() {
  try {
    const result = await pool.query('SELECT filename FROM migrations');
    return new Set(result.rows.map(row => row.filename));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    return new Set();
  }
}

async function applyMigration(filename, sql) {
  try {
    await pool.query('BEGIN');
    await pool.query(sql);
    await pool.query('INSERT INTO migrations (filename) VALUES ($1)', [filename]);
    await pool.query('COMMIT');
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${filename} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`);
  } catch (error) {
    await pool.query('ROLLBACK');
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${filename}:`, error);
    throw error;
  }
}

async function runMigrations() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...');
    
    await ensureMigrationsTable();
    const applied = await getAppliedMigrations();
    
    const migrationsDir = path.join(__dirname);
    const files = fs.readdirSync(migrationsDir)
      .filter(f => f.endsWith('.sql'))
      .sort();
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${files.length} SQL —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π`);
    
    for (const file of files) {
      if (!applied.has(file)) {
        console.log(`üìÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${file}`);
        const sql = fs.readFileSync(path.join(migrationsDir, file), 'utf8');
        await applyMigration(file, sql);
      } else {
        console.log(`‚è≠Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è ${file} —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞`);
      }
    }
    
    console.log('‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
if (require.main === module) {
  runMigrations();
}

module.exports = { runMigrations }; 