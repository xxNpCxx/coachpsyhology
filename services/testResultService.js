const { pool } = require('../config/database');

class TestResultService {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
  async saveTestResults(userId, archetypeScores) {
    try {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä—Ö–µ—Ç–∏–ø—ã –ø–æ –±–∞–ª–ª–∞–º (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
      const sortedArchetypes = Array.from(archetypeScores.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 4); // –ë–µ—Ä–µ–º —Ç–æ–ø-4

      // –°—É–º–º–∞ –±–∞–ª–ª–æ–≤ —Ç–æ–ø-4 –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
      const topSum = sortedArchetypes.reduce((acc, [_, score]) => acc + score, 0) || 1;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      for (let i = 0; i < sortedArchetypes.length; i++) {
        const [archetypeName, score] = sortedArchetypes[i];
        const percentage = Math.round((score / topSum) * 100);
        const position = i + 1;

        await pool.query(`
          INSERT INTO test_results (user_id, archetype_name, score, percentage, position)
          VALUES ($1, $2, $3, $4, $5)
        `, [userId, archetypeName, score, percentage, position]);
      }

      return sortedArchetypes;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ saveTestResults:', error);
      throw error;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
  async saveQuestionAnswers(userId, answers) {
    try {
      for (const answer of answers) {
        await pool.query(`
          INSERT INTO question_answers (user_id, question_index, answer_value, archetype)
          VALUES ($1, $2, $3, $4)
        `, [userId, answer.questionIndex, answer.answer, answer.archetype]);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ saveQuestionAnswers:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserTestResults(userId) {
    try {
      const result = await pool.query(`
        SELECT * FROM test_results 
        WHERE user_id = $1::bigint 
        ORDER BY created_at DESC, position ASC
        LIMIT 20
      `, [userId]);
      
      return result.rows;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getUserTestResults:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getLatestTestResults(userId) {
    try {
      console.log(`üîç [–¢–ï–°–¢] getLatestTestResults –¥–ª—è user_id: ${userId} (—Ç–∏–ø: ${typeof userId})`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
      const latestTest = await pool.query(`
        SELECT created_at FROM test_results 
        WHERE user_id = $1::bigint 
        ORDER BY created_at DESC 
        LIMIT 1
      `, [userId]);

      console.log(`üìä [–¢–ï–°–¢] –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${latestTest.rows.length}`);

      if (latestTest.rows.length === 0) {
        console.log(`‚ö†Ô∏è [–¢–ï–°–¢] –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è user_id: ${userId}`);
        return [];
      }

      const latestDate = latestTest.rows[0].created_at;
      console.log(`üìÖ [–¢–ï–°–¢] –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: ${latestDate}`);

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
      const result = await pool.query(`
        SELECT * FROM test_results 
        WHERE user_id = $1::bigint AND created_at = $2
        ORDER BY position ASC
      `, [userId, latestDate]);
      
      console.log(`‚úÖ [–¢–ï–°–¢] –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${result.rows.length}`);
      if (result.rows.length > 0) {
        console.log(`üéØ [–¢–ï–°–¢] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`, result.rows.map(r => `${r.archetype_name}: ${r.percentage}%`).join(', '));
      }
      
      return result.rows;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getLatestTestResults:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserAnswers(userId) {
    try {
      const result = await pool.query(`
        SELECT * FROM question_answers 
        WHERE user_id = $1::bigint 
        ORDER BY question_index ASC
      `, [userId]);
      
      return result.rows;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getUserAnswers:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤
  async getTestStats() {
    try {
      const result = await pool.query(`
        SELECT 
          COUNT(DISTINCT user_id) as unique_testers,
          COUNT(*) as total_results,
          COUNT(DISTINCT DATE(created_at)) as active_days,
          AVG(score) as avg_score,
          MAX(created_at) as last_test_date
        FROM test_results
      `);
      
      return result.rows[0];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getTestStats:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
  async getPopularArchetypes(limit = 10) {
    try {
      const result = await pool.query(`
        SELECT 
          archetype_name,
          COUNT(*) as count,
          AVG(score) as avg_score,
          AVG(percentage) as avg_percentage
        FROM test_results 
        WHERE position = 1
        GROUP BY archetype_name
        ORDER BY count DESC
        LIMIT $1
      `, [limit]);
      
      return result.rows;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getPopularArchetypes:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async getUserDetailedInfo(userId) {
    try {
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const userResult = await pool.query(`
        SELECT * FROM users WHERE telegram_id = $1::bigint
      `, [userId]);

      if (userResult.rows.length === 0) {
        return null;
      }

      const user = userResult.rows[0];

      // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
      const testResults = await this.getLatestTestResults(userId);

      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      const testCountResult = await pool.query(`
        SELECT COUNT(DISTINCT DATE(created_at)) as test_count
        FROM test_results 
        WHERE user_id = $1::bigint
      `, [userId]);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
      const answersStats = await pool.query(`
        SELECT 
          COUNT(*) as total_answers,
          AVG(answer_value) as avg_answer,
          COUNT(DISTINCT question_index) as questions_answered
        FROM question_answers 
        WHERE user_id = $1::bigint
      `, [userId]);

      return {
        user,
        testResults,
        testCount: testCountResult.rows[0]?.test_count || 0,
        answersStats: answersStats.rows[0] || {}
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getUserDetailedInfo:', error);
      throw error;
    }
  }
}

module.exports = new TestResultService(); 