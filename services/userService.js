const { pool } = require('../config/database');

class UserService {
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async upsertUser(userData) {
    try {
      const { telegram_id, username, first_name, last_name, language_code } = userData;
      
      const result = await pool.query(`
        INSERT INTO users (telegram_id, username, first_name, last_name, language_code)
        VALUES ($1, $2, $3, $4, $5)
        ON CONFLICT (telegram_id) DO UPDATE SET
          username = EXCLUDED.username,
          first_name = EXCLUDED.first_name,
          last_name = EXCLUDED.last_name,
          language_code = EXCLUDED.language_code,
          updated_at = CURRENT_TIMESTAMP
        RETURNING *
      `, [telegram_id, username, first_name, last_name, language_code]);
      
      return result.rows[0];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ upsertUser:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
  async getUserByTelegramId(telegramId) {
    try {
      const result = await pool.query(
        'SELECT * FROM users WHERE telegram_id = $1::bigint',
        [telegramId]
      );
      return result.rows[0] || null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getUserByTelegramId:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  async isAdmin(telegramId) {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramId);
    console.log('üîç ADMIN_USER_ID –∏–∑ env:', process.env.ADMIN_USER_ID);
    
    try {
      const user = await this.getUserByTelegramId(telegramId);
      console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î:', user ? `ID: ${user.telegram_id}, is_admin: ${user.is_admin}` : '–ù–ï –ù–ê–ô–î–ï–ù');
      
      if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ ADMIN_USER_ID');
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const adminUserId = process.env.ADMIN_USER_ID;
        const isOwner = adminUserId && telegramId.toString() === adminUserId;
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞:', telegramId.toString(), '===', adminUserId, '=', isOwner);
        return isOwner;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ is_admin –≤ –ë–î
      if (user.is_admin) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –ø–æ —Ñ–ª–∞–≥—É –≤ –ë–î');
        return true;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_USER_ID
      const adminUserId = process.env.ADMIN_USER_ID;
      const isOwner = adminUserId && telegramId.toString() === adminUserId;
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞:', telegramId.toString(), '===', adminUserId, '=', isOwner);
      
      if (isOwner) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –ø–æ ADMIN_USER_ID');
        return true;
      }
      
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–¥–º–∏–Ω');
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ isAdmin:', error);
      console.log('üîç Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ ADMIN_USER_ID –ø—Ä–∏ –æ—à–∏–±–∫–µ –ë–î');
      // Fallback: –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const adminUserId = process.env.ADMIN_USER_ID;
      const isOwner = adminUserId && telegramId.toString() === adminUserId;
      console.log('üîç Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞:', telegramId.toString(), '===', adminUserId, '=', isOwner);
      return isOwner;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getAllUsers(limit = 50, offset = 0) {
    try {
      const result = await pool.query(`
        SELECT 
          u.*,
          COUNT(tr.id) as tests_count,
          MAX(tr.created_at) as last_test_date
        FROM users u
        LEFT JOIN test_results tr ON u.telegram_id = tr.user_id
        GROUP BY u.id
        ORDER BY u.created_at DESC
        LIMIT $1 OFFSET $2
      `, [limit, offset]);
      
      return result.rows;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getAllUsers:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  async getUsersWithDetails(limit = 50, offset = 0) {
    try {
      const users = await this.getAllUsers(limit, offset);
      const testResultService = require('./testResultService');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const usersWithDetails = await Promise.all(
        users.map(async (user) => {
          const userId = user.telegram_id;
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
          const latestResults = await testResultService.getLatestTestResults(userId);
          
          return {
            ...user,
            latestResults: latestResults || []
          };
        })
      );
      
      return usersWithDetails;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getUsersWithDetails:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async getUsersStats() {
    try {
      const result = await pool.query(`
        SELECT 
          COUNT(*) as total_users,
          COUNT(CASE WHEN is_admin = true THEN 1 END) as admin_users,
          COUNT(CASE WHEN created_at >= CURRENT_DATE - INTERVAL '7 days' THEN 1 END) as new_users_week,
          COUNT(CASE WHEN created_at >= CURRENT_DATE - INTERVAL '30 days' THEN 1 END) as new_users_month
        FROM users
      `);
      
      return result.rows[0];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getUsersStats:', error);
      throw error;
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async searchUsers(query, limit = 20) {
    try {
      const searchQuery = `%${query}%`;
      const result = await pool.query(`
        SELECT * FROM users 
        WHERE 
          username ILIKE $1 OR 
          first_name ILIKE $1 OR 
          last_name ILIKE $1 OR
          telegram_id::text ILIKE $1
        ORDER BY created_at DESC
        LIMIT $2
      `, [searchQuery, limit]);
      
      return result.rows;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ searchUsers:', error);
      throw error;
    }
  }

  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ/—Å–Ω—è—Ç–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async setAdminStatus(telegramId, isAdmin) {
    try {
      const result = await pool.query(`
        UPDATE users 
        SET is_admin = $2, updated_at = CURRENT_TIMESTAMP
        WHERE telegram_id = $1::bigint
        RETURNING *
      `, [telegramId, isAdmin]);
      
      return result.rows[0];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ setAdminStatus:', error);
      throw error;
    }
  }
}

module.exports = new UserService(); 